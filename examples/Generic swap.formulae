<expression tag="Formulae.Script" Modules="org.formulae.typesetting,org.formulae.text.string,org.formulae.symbolic,org.formulae.list,org.formulae.programming,org.formulae.math.arithmetic,org.formulae.time">
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Generic swap"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="This exercise shows a solution for the"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://rosettacode.org/wiki/Generic_swap" Description="Generic swap"/>
				<expression tag="String.Text" Value="problem, described in the website"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://rosettacode.org/wiki/Rosetta_Code" Description="Rosetta code."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Summary of the description from Rosetta Code"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Write a generic swap function or operator which exchanges the values of two variables (or, more generally, any two storage places that can be assigned), regardless of their types."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="If your solution language is statically typed please describe the way your language provides genericity."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="If variables are typed in the given language, it is permissible that the two variables be constrained to having a mutually compatible type, such that each is permitted to hold the value previously stored in the other without a type violation. That is to say, solutions do not have to be capable of exchanging, say, a string and integer value, if the underlying storage locations are not attributed with types that permit such an exchange."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Generic swap is a task which brings together a few separate issues in programming language semantics."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Dynamically typed languages deal with values in a generic way quite readily, but do not necessarily make it easy to write a function to destructively swap two variables, because this requires indirection upon storage places or upon the syntax designating storage places."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Functional languages, whether static or dynamic, do not necessarily allow a destructive operation such as swapping two variables regardless of their generic capabilities."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Some static languages have difficulties with generic programming due to a lack of support for parametric polymorphism."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Solution"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Fōrmulæ supports assignments of several symbols to (the same number of expressions). The expression are first reduced before the actual assignment."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="This can be used to do a generic swap as follows:"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Symbolic.Assignment">
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="x"/>
				<expression tag="Symbolic.Symbol" Name="y"/>
			</expression>
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="y"/>
				<expression tag="Symbolic.Symbol" Name="x"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Paragraph">
			<expression tag="String.Text" Value="Example:"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Programming.Block" Description="Description" Expanded="True">
			<expression tag="Symbolic.Local">
				<expression tag="Symbolic.Assignment">
					<expression tag="Symbolic.Symbol" Name="x"/>
					<expression tag="String.String" Value="Hello"/>
				</expression>
			</expression>
			<expression tag="Symbolic.Local">
				<expression tag="Symbolic.Assignment">
					<expression tag="Symbolic.Symbol" Name="y"/>
					<expression tag="Math.Number" Value="57"/>
				</expression>
			</expression>
			<expression tag="Symbolic.Assignment">
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="x"/>
					<expression tag="Symbolic.Symbol" Name="y"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="y"/>
					<expression tag="Symbolic.Symbol" Name="x"/>
				</expression>
			</expression>
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="x"/>
				<expression tag="Symbolic.Symbol" Name="y"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.List">
			<expression tag="Math.Number" Value="57"/>
			<expression tag="String.String" Value="Hello"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="See also:"/>
				</expression>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Other"/>
					<expression tag="Internet.UniformResourceLocator" Value="/?script=articles/Rosetta_Code_examples" Description="Rosetta code"/>
					<expression tag="String.Text" Value="examples"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Author: Laurence R. Ugalde"/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Last modified:"/>
				<expression tag="Time.Time" Value="1621037940000"/>
			</expression>
		</expression>
	</expression>
</expression>