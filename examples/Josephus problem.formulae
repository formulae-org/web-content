<expression tag="Formulae.Script" Modules="org.formulae.typesetting,org.formulae.text.string,org.formulae.symbolic,org.formulae.list,org.formulae.programming,org.formulae.math.arithmetic,org.formulae.expression,org.formulae.visualization,org.formulae.graphics.raster,org.formulae.color,org.formulae.time">
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Josephus problem"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Josephus_problem" Description="Josephus problem"/>
				<expression tag="String.Text" Value="(or"/>
				<expression tag="Typesetting.ItalicChunk">
					<expression tag="String.Text" Value="Josephus permutation)"/>
				</expression>
				<expression tag="String.Text" Value="is a theoretical problem related to a certain counting-out game."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="People are standing in a circle waiting to be executed. Counting begins at a specified point in the circle and proceeds around the circle in a specified direction. After a specified number of people are skipped, the next person is executed. The procedure is repeated with the remaining people, starting with the next person, going in the same direction and skipping the same number of people, until only one person remains, and is freed."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The problem —given the number of people, starting point, direction, and number to be skipped— is to choose the position in the initial circle to avoid execution."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="This article shows programs for computing the Josephus problem and related tasks."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="This also shows a solution for the"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://rosettacode.org/wiki/Josephus_problem" Description="Josephus problem"/>
				<expression tag="String.Text" Value="exercise, described in the website"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://rosettacode.org/wiki/Rosetta_Code" Description="Rosetta code."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Solution"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="We start with two lists. The first one contains initially the prisoners (their number), and the second one contains the kills, and it is initially empty."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="On every kill, the number of the killed prisoner is deleted from the first list, and it is (striked out) appended to the second one, in order to show the order of kills."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="In order to leave more than one survivor, the cycle is repeated n-s times, where n is the number of prisoners and s is the number of survivors."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="At the end, the two lists are retrieved."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Even when Fōrmulæ is 1-based, the list is filled starting with the 0 prisoner, in order to the results can be compared with other languages (mostly 0-based)."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="2">
		<expression tag="Symbolic.Assignment">
			<expression tag="Symbolic.Function">
				<expression tag="Symbolic.Symbol" Name="Josephus"/>
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="n"/>
					<expression tag="Symbolic.Symbol" Name="k"/>
					<expression tag="Symbolic.Symbol" Name="s"/>
				</expression>
			</expression>
			<expression tag="Programming.Block" Description="block" Expanded="True">
				<expression tag="Symbolic.Local">
					<expression tag="Symbolic.Assignment">
						<expression tag="Symbolic.Symbol" Name="prisoners"/>
						<expression tag="List.CreateList">
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Symbolic.Symbol" Name="i"/>
								<expression tag="Math.Arithmetic.Negative">
									<expression tag="Math.Number" Value="1"/>
								</expression>
							</expression>
							<expression tag="Symbolic.Symbol" Name="i"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Symbolic.Symbol" Name="n"/>
						</expression>
					</expression>
				</expression>
				<expression tag="Symbolic.Local">
					<expression tag="Symbolic.Assignment">
						<expression tag="Symbolic.Symbol" Name="kills"/>
						<expression tag="List.List"/>
					</expression>
				</expression>
				<expression tag="Symbolic.Local">
					<expression tag="Symbolic.Assignment">
						<expression tag="Symbolic.Symbol" Name="pos"/>
						<expression tag="Math.Number" Value="1"/>
					</expression>
				</expression>
				<expression tag="Programming.ForTimes">
					<expression tag="Programming.Block" Description="block" Expanded="True">
						<expression tag="Symbolic.Assignment">
							<expression tag="Symbolic.Symbol" Name="pos"/>
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Math.Arithmetic.Mod">
									<expression tag="Math.Arithmetic.Addition">
										<expression tag="Symbolic.Symbol" Name="pos"/>
										<expression tag="Math.Arithmetic.Negative">
											<expression tag="Math.Number" Value="1"/>
										</expression>
										<expression tag="Symbolic.Symbol" Name="k"/>
										<expression tag="Math.Arithmetic.Negative">
											<expression tag="Math.Number" Value="1"/>
										</expression>
									</expression>
									<expression tag="Expression.Cardinality">
										<expression tag="Symbolic.Symbol" Name="prisoners"/>
									</expression>
								</expression>
								<expression tag="Math.Number" Value="1"/>
							</expression>
						</expression>
						<expression tag="Expression.Append">
							<expression tag="Symbolic.Symbol" Name="kills"/>
							<expression tag="Visualization.CrossedOut">
								<expression tag="Expression.Delete">
									<expression tag="Symbolic.Symbol" Name="prisoners"/>
									<expression tag="Symbolic.Symbol" Name="pos"/>
								</expression>
							</expression>
						</expression>
					</expression>
					<expression tag="Math.Arithmetic.Addition">
						<expression tag="Symbolic.Symbol" Name="n"/>
						<expression tag="Math.Arithmetic.Negative">
							<expression tag="Symbolic.Symbol" Name="s"/>
						</expression>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="prisoners"/>
					<expression tag="Symbolic.Symbol" Name="kills"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Case 1 (from Rosetta code). Given example"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="5 prisoners, killing every 2:"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Symbolic.Function">
			<expression tag="Symbolic.Symbol" Name="Josephus"/>
			<expression tag="List.List">
				<expression tag="Math.Number" Value="5"/>
				<expression tag="Math.Number" Value="2"/>
				<expression tag="Math.Number" Value="1"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.List">
			<expression tag="List.List">
				<expression tag="Math.Number" Value="2"/>
			</expression>
			<expression tag="List.List">
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="3"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="4"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Case 2 (from Rosetta code)"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="41 prisoners, killing every 3:"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Symbolic.Function">
			<expression tag="Symbolic.Symbol" Name="Josephus"/>
			<expression tag="List.List">
				<expression tag="Math.Number" Value="41"/>
				<expression tag="Math.Number" Value="3"/>
				<expression tag="Math.Number" Value="1"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.List">
			<expression tag="List.List">
				<expression tag="Math.Number" Value="30"/>
			</expression>
			<expression tag="List.List">
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="2"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="5"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="8"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="11"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="14"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="17"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="20"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="23"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="26"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="29"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="32"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="35"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="38"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="4"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="9"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="13"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="18"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="22"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="27"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="31"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="36"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="40"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="6"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="12"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="19"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="25"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="33"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="39"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="7"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="16"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="28"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="37"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="10"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="24"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="21"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="3"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="34"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="15"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Case 3 (from Rosetta code). Extra"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The captors may be especially kind and let m survivors free,&#10;and Josephus might just have m - 1 friends to save."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Symbolic.Function">
			<expression tag="Symbolic.Symbol" Name="Josephus"/>
			<expression tag="List.List">
				<expression tag="Math.Number" Value="41"/>
				<expression tag="Math.Number" Value="3"/>
				<expression tag="Math.Number" Value="3"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.List">
			<expression tag="List.List">
				<expression tag="Math.Number" Value="15"/>
				<expression tag="Math.Number" Value="30"/>
				<expression tag="Math.Number" Value="34"/>
			</expression>
			<expression tag="List.List">
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="2"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="5"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="8"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="11"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="14"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="17"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="20"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="23"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="26"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="29"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="32"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="35"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="38"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="4"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="9"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="13"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="18"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="22"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="27"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="31"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="36"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="40"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="6"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="12"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="19"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="25"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="33"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="39"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="7"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="16"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="28"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="37"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="10"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="24"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="21"/>
				</expression>
				<expression tag="Visualization.CrossedOut">
					<expression tag="Math.Number" Value="3"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Case 4. Larger example"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="23,482 prisoners, killing every 3,343, leaving 3 survivors. Only the survivors are shown (the first element of the resulting list is extracted):"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Expression.Child">
			<expression tag="Symbolic.Function">
				<expression tag="Symbolic.Symbol" Name="Josephus"/>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="23482"/>
					<expression tag="Math.Number" Value="3343"/>
					<expression tag="Math.Number" Value="3"/>
				</expression>
			</expression>
			<expression tag="Math.Number" Value="1"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.List">
			<expression tag="Math.Number" Value="1087"/>
			<expression tag="Math.Number" Value="1335"/>
			<expression tag="Math.Number" Value="13317"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Drawing history"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The following function creates a raster graphics of size n squares width, and n + 1 squares height, where n is the number of prisoners. The size of the square is defines as pixels."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The horizontal axis (right to left) is the number of the prisoner. The vertical axis (top to bottom) is the number of cycle."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="An alive prisoner is drawn as green, a dead one is drawn as black."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="2">
		<expression tag="Symbolic.Assignment">
			<expression tag="Symbolic.Function">
				<expression tag="Symbolic.Symbol" Name="JosephusG"/>
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="n"/>
					<expression tag="Symbolic.Symbol" Name="k"/>
					<expression tag="Symbolic.Symbol" Name="width"/>
				</expression>
			</expression>
			<expression tag="Programming.Block" Description="block" Expanded="True">
				<expression tag="Symbolic.Local">
					<expression tag="Symbolic.Assignment">
						<expression tag="Symbolic.Symbol" Name="prisoners"/>
						<expression tag="List.CreateList">
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Symbolic.Symbol" Name="i"/>
								<expression tag="Math.Arithmetic.Negative">
									<expression tag="Math.Number" Value="1"/>
								</expression>
							</expression>
							<expression tag="Symbolic.Symbol" Name="i"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Symbolic.Symbol" Name="n"/>
						</expression>
					</expression>
				</expression>
				<expression tag="Symbolic.Local">
					<expression tag="Symbolic.Assignment">
						<expression tag="Symbolic.Symbol" Name="pos"/>
						<expression tag="Math.Number" Value="1"/>
					</expression>
				</expression>
				<expression tag="Symbolic.Local">
					<expression tag="Symbolic.Assignment">
						<expression tag="Symbolic.Symbol" Name="g"/>
						<expression tag="Graphics.CreateRasterGraphics">
							<expression tag="Math.Arithmetic.Multiplication">
								<expression tag="Symbolic.Symbol" Name="n"/>
								<expression tag="Symbolic.Symbol" Name="width"/>
							</expression>
							<expression tag="Math.Arithmetic.Multiplication">
								<expression tag="Math.Arithmetic.Addition">
									<expression tag="Symbolic.Symbol" Name="n"/>
									<expression tag="Math.Number" Value="1"/>
								</expression>
								<expression tag="Symbolic.Symbol" Name="width"/>
							</expression>
							<expression tag="Color.Color" Red="0" Green="0" Blue="0" Alpha="1"/>
						</expression>
					</expression>
				</expression>
				<expression tag="Symbolic.Local">
					<expression tag="Symbolic.Assignment">
						<expression tag="Symbolic.Function">
							<expression tag="Symbolic.Symbol" Name="draw"/>
							<expression tag="List.List">
								<expression tag="Symbolic.Symbol" Name="row"/>
							</expression>
						</expression>
						<expression tag="Programming.ForIn">
							<expression tag="Graphics.FillRectanglePosSize">
								<expression tag="Symbolic.Symbol" Name="g"/>
								<expression tag="Math.Arithmetic.Multiplication">
									<expression tag="Symbolic.Symbol" Name="width"/>
									<expression tag="Symbolic.Symbol" Name="i"/>
								</expression>
								<expression tag="Math.Arithmetic.Multiplication">
									<expression tag="Symbolic.Symbol" Name="width"/>
									<expression tag="Math.Arithmetic.Addition">
										<expression tag="Symbolic.Symbol" Name="row"/>
										<expression tag="Math.Arithmetic.Negative">
											<expression tag="Math.Number" Value="1"/>
										</expression>
									</expression>
								</expression>
								<expression tag="Symbolic.Symbol" Name="width"/>
								<expression tag="Symbolic.Symbol" Name="width"/>
							</expression>
							<expression tag="Symbolic.Symbol" Name="i"/>
							<expression tag="Symbolic.Symbol" Name="prisoners"/>
						</expression>
					</expression>
				</expression>
				<expression tag="Graphics.SetColor">
					<expression tag="Symbolic.Symbol" Name="g"/>
					<expression tag="Color.Color" Red="0" Green="1" Blue="0" Alpha="1"/>
				</expression>
				<expression tag="Symbolic.Function">
					<expression tag="Symbolic.Symbol" Name="draw"/>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="1"/>
					</expression>
				</expression>
				<expression tag="Programming.ForFromTo">
					<expression tag="Programming.Block" Description="block" Expanded="True">
						<expression tag="Symbolic.Assignment">
							<expression tag="Symbolic.Symbol" Name="pos"/>
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Math.Arithmetic.Mod">
									<expression tag="Math.Arithmetic.Addition">
										<expression tag="Symbolic.Symbol" Name="pos"/>
										<expression tag="Math.Arithmetic.Negative">
											<expression tag="Math.Number" Value="1"/>
										</expression>
										<expression tag="Symbolic.Symbol" Name="k"/>
										<expression tag="Math.Arithmetic.Negative">
											<expression tag="Math.Number" Value="1"/>
										</expression>
									</expression>
									<expression tag="Expression.Cardinality">
										<expression tag="Symbolic.Symbol" Name="prisoners"/>
									</expression>
								</expression>
								<expression tag="Math.Number" Value="1"/>
							</expression>
						</expression>
						<expression tag="Expression.Delete">
							<expression tag="Symbolic.Symbol" Name="prisoners"/>
							<expression tag="Symbolic.Symbol" Name="pos"/>
						</expression>
						<expression tag="Symbolic.Function">
							<expression tag="Symbolic.Symbol" Name="draw"/>
							<expression tag="List.List">
								<expression tag="Math.Arithmetic.Addition">
									<expression tag="Symbolic.Symbol" Name="i"/>
									<expression tag="Math.Number" Value="1"/>
								</expression>
							</expression>
						</expression>
					</expression>
					<expression tag="Symbolic.Symbol" Name="i"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Symbolic.Symbol" Name="n"/>
				</expression>
				<expression tag="Symbolic.Symbol" Name="g"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Paragraph">
			<expression tag="String.Text" Value="Graph for the case 5 prisoners, killing every 2 (cell size 20x20 pixels):"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Symbolic.Function">
			<expression tag="Symbolic.Symbol" Name="JosephusG"/>
			<expression tag="List.List">
				<expression tag="Math.Number" Value="5"/>
				<expression tag="Math.Number" Value="2"/>
				<expression tag="Math.Number" Value="20"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="Graphics.RasterGraphics" Value="iVBORw0KGgoAAAANSUhEUgAAAGQAAAB4CAYAAAAE9le0AAAAAXNSR0IArs4c6QAAAolJREFUeF7tnEFuwzAMBOX/PzpFc2suhLADYotMrzIpaka0HNjoc17ndfyrIfAopMbFuxCFdPlQSJkPhSikjUBZPZ4hCikjUFaOHaKQMgJl5dghCikjUFaOHaKQMgJl5dghCikjUFaOHaKQMgJl5dghCikjUFYO3yEPvMIve+OvEHj/pOkUkhKE4xUCA03TKSQlCMcrBAaaplNIShCOVwgMNE2nkJQgHK8QGGiaTiEpQTheITDQNJ1CUoJwvEJgoGk6haQE4XiFwEDTdApJCcLxCoGBpukUkhKE4xUCA03TfZ+Q8nf+Ckm3NPwRhkIUckkA3oHHW9algM/LFRICLN+BdkjoF/9fReUbxkO9bMMoRCGXBDzUL4F9Xl5+j/ZQD/16qKcA7ZCIoId6hO8cuoMVopBLAj5lXQLzKSsE9jfcW1aKE+5ghSjkkgC8A/t/GOIPbpfAp8sVMhFaHlfIMvBpOoVMhJbHFbIMfJpOIROh5XGFLAOfplPIRGh5XCHLwKfpFDIRWh5XyDLwaTqFTISWxxWyDHyaTiEToeVxhSwDn6ZTyERoeVwhy8Cn6RQyEVoeV8gy8Gk6hUyElscVsgx8mq5dyFT/5fjvp9H0ki9LGC6nq6M/BmdX+/4ohl4yWyJdnUJCPwoJAdLhCqGJhvkUEgKkwxVCEw3zKSQESIcrhCYa5lNICJAOVwhNNMynkBAgHa4QmmiYTyEhQDpcITTRMJ9CQoB0uEJoomE+hYQA6XCF0ETDfAoJARoeEeh/hRst7/8FK6TMmUIUUkagrBw7RCFlBMrKsUMUUkagrBw7RCFlBMrKsUMUUkagrBw7RCFlBMrKsUMUUkagrBw7RCFlBMrKsUPKhPwAGzUrwJ6A+DAAAAAASUVORK5CYII="/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Paragraph">
			<expression tag="String.Text" Value="Drawing for the case 41 prisoners, killing every 3 (cell size is 5x5 pixels):"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Symbolic.Function">
			<expression tag="Symbolic.Symbol" Name="JosephusG"/>
			<expression tag="List.List">
				<expression tag="Math.Number" Value="41"/>
				<expression tag="Math.Number" Value="3"/>
				<expression tag="Math.Number" Value="5"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="Graphics.RasterGraphics" Value="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"/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Paragraph">
			<expression tag="String.Text" Value="Drawing for the case 500 prisoners, killing every 6 (cell size is 1x1 pixel):"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Symbolic.Function">
			<expression tag="Symbolic.Symbol" Name="JosephusG"/>
			<expression tag="List.List">
				<expression tag="Math.Number" Value="500"/>
				<expression tag="Math.Number" Value="6"/>
				<expression tag="Math.Number" Value="1"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="Graphics.RasterGraphics" Value=""/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="These drawings have several interesting properties:"/>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="If we divided the drawing in horizontal lines, the first one has n green squares and 0 black squares, the second one has n - 1 green squares and 1 black square, ..., the last one has 0 green squares and n black squares, but these squares are not necessarily contiguous."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Conversely, if we divided the drawing in vertical lines we see a similar pattern, but the lines are not ordered. However, their colors are always contiguous (a first green part, and then a black one)."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="The drawing always contains the same number of green and black squares, ½ n(n+1) of each color."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="The drawing is highly ordered at top, gradually changing to be highly disordered at bottom. It resembles a Escher drawing that slightly changes from one scene to another."/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="See also:"/>
				</expression>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Other"/>
					<expression tag="Internet.UniformResourceLocator" Value="/?script=articles/Rosetta_Code_examples" Description="Rosetta code"/>
					<expression tag="String.Text" Value="examples"/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Other"/>
					<expression tag="Internet.UniformResourceLocator" Value="/?script=articles/Graphics_examples" Description="graphics"/>
					<expression tag="String.Text" Value="examples"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Author: Laurence R. Ugalde"/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Last modified:"/>
				<expression tag="Time.Time" Value="1621184820000"/>
			</expression>
		</expression>
	</expression>
</expression>