<expression tag="Formulae.Script"><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="Truth table"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="A"/><expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Truth_table" Description="truth table"/><expression tag="String.Text" Value="is a mathematical table used in logic—specifically in connection with Boolean algebra, boolean functions, and propositional calculus—which sets out the functional values of logical expressions on each of their functional arguments, that is, for each combination of values taken by their logical variables. In particular, truth tables can be used to show whether a propositional expression is true for all legitimate input values, that is, logically valid."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="This script shows how to programatically create truth tables for an arbitrary logical expression, containing any number of logical variables also named arbirtrarily."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="It is also an answer to the excercise"/><expression tag="Internet.UniformResourceLocator" Value="https://rosettacode.org/wiki/Truth_table" Description="Truth table"/><expression tag="String.Text" Value="of"/><expression tag="Internet.UniformResourceLocator" Value="https://rosettacode.org/wiki/Rosetta_Code" Description="Rosetta code"/></expression><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="Program"/></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="2"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="Truth table"/><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="λ"/></expression></expression><expression tag="Programming.Block" Description="block" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="dim"/><expression tag="Expression.Cardinality"><expression tag="Expression.Child"><expression tag="Symbolic.Symbol" Name="λ"/><expression tag="Math.Number" Value="1"/></expression></expression></expression></expression><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="values"/><expression tag="List.CartesianExponentiation"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="Symbolic.Symbol" Name="dim"/></expression></expression></expression><expression tag="List.CreateList"><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="v"/><expression tag="Symbolic.LambdaApplication"><expression tag="Symbolic.Symbol" Name="λ"/><expression tag="Symbolic.Symbol" Name="v"/></expression></expression><expression tag="Symbolic.Symbol" Name="v"/><expression tag="Symbolic.Symbol" Name="values"/></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="In order to use the program, the user must introduce the expression as a lambda expression. Let us calculate the thruth table of the conjunction (AND) of two logical variables p and q:"/></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="TruthTable"/><expression tag="List.List"><expression tag="Symbolic.Lambda"><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="p"/><expression tag="Symbolic.Symbol" Name="q"/></expression><expression tag="Logic.Conjunction"><expression tag="Symbolic.Symbol" Name="p"/><expression tag="Symbolic.Symbol" Name="q"/></expression></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.True"/></expression><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="Logic.False"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.True"/></expression><expression tag="Logic.False"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.False"/></expression><expression tag="Logic.False"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="Explanation"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Part 1. Obtaining the number of variables of the input lambda expression."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The expression"/></expression><expression tag="Typesetting.Centering"><expression tag="Expression.Cardinality"><expression tag="Expression.Child"><expression tag="Symbolic.Symbol" Name="λ"/><expression tag="Math.Number" Value="1"/></expression></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Is intended to calculate the number of parameters of the lambda expression. In order to explain it, it is necessary to show first how a lambda expression is structured. A lambda expression always contains two subexpressions: the first one is the list of parameters, and the second one is the body expression, as it is shown next:"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Diagramming.ToTree"><expression tag="Symbolic.Lambda"><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="p"/><expression tag="Symbolic.Symbol" Name="q"/></expression><expression tag="Logic.Conjunction"><expression tag="Symbolic.Symbol" Name="p"/><expression tag="Symbolic.Symbol" Name="q"/></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Diagramming.Tree" Expanded="True"><expression tag="String.String" Value="Symbolic.Lambda"/><expression tag="Diagramming.Tree" Expanded="True"><expression tag="String.String" Value="List.List"/><expression tag="Diagramming.Tree" Expanded="True"><expression tag="Symbolic.Symbol" Name="p"/></expression><expression tag="Diagramming.Tree" Expanded="True"><expression tag="Symbolic.Symbol" Name="q"/></expression></expression><expression tag="Diagramming.Tree" Expanded="True"><expression tag="String.String" Value="Logic.Conjunction"/><expression tag="Diagramming.Tree" Expanded="True"><expression tag="Symbolic.Symbol" Name="p"/></expression><expression tag="Diagramming.Tree" Expanded="True"><expression tag="Symbolic.Symbol" Name="q"/></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Then, the expression "/><expression tag="Expression.Child"><expression tag="Symbolic.Symbol" Name="λ"/><expression tag="Math.Number" Value="1"/></expression><expression tag="String.Text" Value="Extract this first element (the list of arguments), and finally we use the cardinality operator "/><expression tag="Expression.Cardinality"><expression tag="Expression.Child"><expression tag="Symbolic.Symbol" Name="λ"/><expression tag="Math.Number" Value="1"/></expression></expression><expression tag="String.Text" Value=" give us the number of elements of such that list."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Part 2. Obtaining the combinations of the"/><expression tag="Logic.True"/><expression tag="String.Text" Value="and"/><expression tag="Logic.False"/><expression tag="String.Text" Value="logical literals."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="We use the concept of"/><expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Cartesian_product" Description="cartesian product"/><expression tag="String.Text" Value="A cartesian product of two sets is the all possible combinations of elements from the sets. If the two sets are the same set, it is a cartesian exponentiation, in the same sense that if we multiplicate several times the same value, it is an exponetiation. For our case, the set contains two elements, the true and the false logical value. The folloings are examples of the cartesian exponentation of the set (true, false) to the 1, 2 and 3 exponent:"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="List.CartesianExponentiation"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="Math.Number" Value="1"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="Logic.False"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="List.CartesianExponentiation"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="Math.Number" Value="2"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.False"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="List.CartesianExponentiation"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="Math.Number" Value="3"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.True"/><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/><expression tag="Logic.False"/></expression><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.True"/><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.False"/><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.False"/><expression tag="Logic.False"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Now remember that matrices are lists of lists, so for the example "/><expression tag="List.CartesianExponentiation"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="Math.Number" Value="2"/></expression><expression tag="String.Text" Value="The result is the list of 4 elements: "/><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.True"/></expression><expression tag="String.Text" Value=", "/><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="String.Text" Value=", "/><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.True"/></expression><expression tag="String.Text" Value=", and "/><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.False"/></expression><expression tag="String.Text" Value="."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Also notice that the resulting lists have as many elements as the exponent."/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Part 3. Arraization"/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The Fōrmulæ arraization expression is similar in notation and functionality to summation, see the following examples:"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Math.Arithmetic.Summation"><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Symbolic.Symbol" Name="i"/></expression><expression tag="Symbolic.Symbol" Name="i"/><expression tag="Math.Number" Value="0"/><expression tag="Math.Number" Value="10"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Math.Arithmetic.Addition"><expression tag="Math.Number" Value="1"/><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="2"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="3"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="4"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="5"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="6"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="7"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="8"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="9"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="10"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="List.CreateList"><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Symbolic.Symbol" Name="i"/></expression><expression tag="Symbolic.Symbol" Name="i"/><expression tag="Math.Number" Value="0"/><expression tag="Math.Number" Value="10"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="Math.Number" Value="1"/><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="2"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="3"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="4"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="5"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="6"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="7"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="8"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="9"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="10"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Math.Arithmetic.Summation"><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Symbolic.Symbol" Name="i"/></expression><expression tag="Symbolic.Symbol" Name="i"/><expression tag="List.List"><expression tag="Math.Number" Value="0"/><expression tag="Symbolic.Symbol" Name="a"/><expression tag="Math.Number" Value="5"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Math.Arithmetic.Addition"><expression tag="Math.Number" Value="1"/><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Symbolic.Symbol" Name="a"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="5"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="List.CreateList"><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Symbolic.Symbol" Name="i"/></expression><expression tag="Symbolic.Symbol" Name="i"/><expression tag="List.List"><expression tag="Math.Number" Value="0"/><expression tag="Symbolic.Symbol" Name="a"/><expression tag="Math.Number" Value="5"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="Math.Number" Value="1"/><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Symbolic.Symbol" Name="a"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="5"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Part 4. Calculation and output"/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The expression"/></expression><expression tag="Typesetting.Centering"><expression tag="List.CreateList"><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="v"/><expression tag="Symbolic.LambdaApplication"><expression tag="Symbolic.Symbol" Name="λ"/><expression tag="Symbolic.Symbol" Name="v"/></expression></expression><expression tag="Symbolic.Symbol" Name="v"/><expression tag="Symbolic.Symbol" Name="values"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Creates an array from the elements of the values array. Note that this array is a list of lists (a matrix), produced as a cartesian product exponentiation, so the v symbol repeatedly acquires an array (for every row of the matrix)."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The expression:"/></expression><expression tag="Typesetting.Centering"><expression tag="Symbolic.LambdaApplication"><expression tag="Symbolic.Symbol" Name="λ"/><expression tag="Symbolic.Symbol" Name="v"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Is the lambda application of the λ lambda expression using the set of values provided precisely as the symbol v."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Note that the arraization produces an array, and the expression to create the elements of the array is also an array, the final result is shown as a matrix."/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="Case 1. One variable"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The following example produces the"/><expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Negation" Description="logical negation"/><expression tag="String.Text" Value="table"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="Truth table"/><expression tag="List.List"><expression tag="Symbolic.Lambda"><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="p"/></expression><expression tag="Logic.Negation"><expression tag="Symbolic.Symbol" Name="p"/></expression></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/></expression><expression tag="Logic.False"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.False"/></expression><expression tag="Logic.True"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="Case 2. Two variables"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The following example produces the"/><expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Logical_conjunction" Description="logical conjunction"/><expression tag="String.Text" Value="table"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="Truth table"/><expression tag="List.List"><expression tag="Symbolic.Lambda"><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="p"/><expression tag="Symbolic.Symbol" Name="q"/></expression><expression tag="Logic.Conjunction"><expression tag="Symbolic.Symbol" Name="p"/><expression tag="Symbolic.Symbol" Name="q"/></expression></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.True"/></expression><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="Logic.False"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.True"/></expression><expression tag="Logic.False"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.False"/></expression><expression tag="Logic.False"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Because there is no restrictions about the mapping expression, it can be an array of expressions involving the arguments."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The following example produces the truth table for logical"/><expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Logical_conjunction" Description="conjunction,"/><expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Logical_disjunction" Description="disjunction,"/><expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Material_conditional" Description="material implication,"/><expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Logical_equivalence" Description="equivalence,"/><expression tag="String.Text" Value="and"/><expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Exclusive_or" Description="exclusive disjunction."/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="Truth table"/><expression tag="List.List"><expression tag="Symbolic.Lambda"><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="p"/><expression tag="Symbolic.Symbol" Name="q"/></expression><expression tag="List.List"><expression tag="Logic.Conjunction"><expression tag="Symbolic.Symbol" Name="p"/><expression tag="Symbolic.Symbol" Name="q"/></expression><expression tag="Logic.Disjunction"><expression tag="Symbolic.Symbol" Name="p"/><expression tag="Symbolic.Symbol" Name="q"/></expression><expression tag="Logic.Implication"><expression tag="Symbolic.Symbol" Name="p"/><expression tag="Symbolic.Symbol" Name="q"/></expression><expression tag="Logic.Equivalence"><expression tag="Symbolic.Symbol" Name="p"/><expression tag="Symbolic.Symbol" Name="q"/></expression><expression tag="Logic.ExclusiveDisjunction"><expression tag="Symbolic.Symbol" Name="p"/><expression tag="Symbolic.Symbol" Name="q"/></expression></expression></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.True"/><expression tag="Logic.True"/><expression tag="Logic.True"/><expression tag="Logic.False"/></expression></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.True"/><expression tag="Logic.False"/><expression tag="Logic.False"/><expression tag="Logic.True"/></expression></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.True"/><expression tag="Logic.True"/><expression tag="Logic.False"/><expression tag="Logic.True"/></expression></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.False"/></expression><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.False"/><expression tag="Logic.True"/><expression tag="Logic.True"/><expression tag="Logic.False"/></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="Case 3. Three variables"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="In the following example, the truth table is used to show that a boolean formula is a"/><expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Tautology_(logic)" Description="tautology."/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="SocratesSyllogism"/><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="Human"/><expression tag="Symbolic.Symbol" Name="Mortal"/><expression tag="Symbolic.Symbol" Name="Socrates"/></expression></expression><expression tag="Logic.Implication"><expression tag="Logic.Conjunction"><expression tag="Logic.Implication"><expression tag="Symbolic.Symbol" Name="Human"/><expression tag="Symbolic.Symbol" Name="Mortal"/></expression><expression tag="Logic.Implication"><expression tag="Symbolic.Symbol" Name="Socrates"/><expression tag="Symbolic.Symbol" Name="Human"/></expression></expression><expression tag="Logic.Implication"><expression tag="Symbolic.Symbol" Name="Socrates"/><expression tag="Symbolic.Symbol" Name="Mortal"/></expression></expression></expression></expression><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="Truth table"/><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="SocratesSyllogism"/></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.True"/><expression tag="Logic.True"/></expression><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/><expression tag="Logic.True"/></expression><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/><expression tag="Logic.False"/></expression><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.True"/><expression tag="Logic.True"/></expression><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.False"/><expression tag="Logic.True"/></expression><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.False"/><expression tag="Logic.False"/></expression><expression tag="Logic.True"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Hacking mode"/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The provided program was created with clarity purposes in mind. A compressed, but not so clear version could be:"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="2"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="Truth table v2"/><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="λ"/></expression></expression><expression tag="List.CreateList"><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="v"/><expression tag="Symbolic.LambdaApplication"><expression tag="Symbolic.Symbol" Name="λ"/><expression tag="Symbolic.Symbol" Name="v"/></expression></expression><expression tag="Symbolic.Symbol" Name="v"/><expression tag="List.CartesianExponentiation"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="Expression.Cardinality"><expression tag="Expression.Child"><expression tag="Symbolic.Symbol" Name="λ"/><expression tag="Math.Number" Value="1"/></expression></expression></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="Truth table v2"/><expression tag="List.List"><expression tag="Symbolic.Lambda"><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="p"/><expression tag="Symbolic.Symbol" Name="q"/></expression><expression tag="Logic.Conjunction"><expression tag="Symbolic.Symbol" Name="p"/><expression tag="Symbolic.Symbol" Name="q"/></expression></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.True"/></expression><expression tag="Logic.True"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.True"/><expression tag="Logic.False"/></expression><expression tag="Logic.False"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.True"/></expression><expression tag="Logic.False"/></expression><expression tag="List.List"><expression tag="List.List"><expression tag="Logic.False"/><expression tag="Logic.False"/></expression><expression tag="Logic.False"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="See also:"/></expression></expression><expression tag="Typesetting.BulletedList"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Other"/><expression tag="Internet.UniformResourceLocator" Value="/?article=Mathematical_logic_examples" Description="mathematical logic"/><expression tag="String.Text" Value="examples"/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Other"/><expression tag="Internet.UniformResourceLocator" Value="/?article=Rosetta_Code_examples" Description="Rosetta code"/><expression tag="String.Text" Value="examples"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Author: Laurence R. Ugalde"/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Last modified:"/><expression tag="Time.Time" Value="1621876212567"/></expression></expression></expression></expression>