<expression tag="Formulae.Script" Modules="org.formulae.typesetting,org.formulae.text.string,org.formulae.graphics.raster,org.formulae.visualization,org.formulae.math.arithmetic,org.formulae.diagramming,org.formulae.symbolic,org.formulae.expression,org.formulae.list,org.formulae.math.complex,org.formulae.relation,org.formulae.time">
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Guía del desarrollador"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Capítulo 2. Visualización"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Cada clase expresión debe tener una forma de visualización, que es la representación de la expresión en un entorno bidimensional."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Rule"/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Métricas"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Cada expresión cuenta con algunas métricas, basadas en la siguiente figura:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Graphics.RasterGraphics" Value=""/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Como en la mayoría de los entornos gráficos, el sistema de coordenadas es tal que las abcisas (x) aumentan a la derecha y las ordenadas (y)  aumentan hacia abajo."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Dichas métricas son:"/>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Un tamaño, definido por valores de ancho y alto."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Una posición, definida por un par coordenado (x, y), respecto al origen de la expresión padre."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Una línea horizontal imaginaria, llamada"/>
					<expression tag="Typesetting.ItalicChunk">
						<expression tag="String.Text" Value="línea base horizontal"/>
					</expression>
					<expression tag="String.Text" Value="utilizada para fines de alineación. De forma análoga se tiene una"/>
					<expression tag="Typesetting.ItalicChunk">
						<expression tag="String.Text" Value="línea base vertical."/>
					</expression>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Rule"/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Atributos y métodos"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Estas métricas son definidas en las clase"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="Expression"/>
				</expression>
				<expression tag="String.Text" Value="por medio de los siguientes atributos y métodos:"/>
			</expression>
			<expression tag="String.Text" Value="Atributos:"/>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Un atributo"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="width"/>
					</expression>
					<expression tag="String.Text" Value="que es el ancho de la expresión."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Un atributo"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="height"/>
					</expression>
					<expression tag="String.Text" Value="que es el alto de la expresión."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Un atributo"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="horzBaseline"/>
					</expression>
					<expression tag="String.Text" Value="que es la distancia vertical de la línea base horizontal relativa al origen de la expresión."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Un atributo"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="vertBaseline"/>
					</expression>
					<expression tag="String.Text" Value="que es la distancia horizontal de la línea base vertical relativa al origen de la expresión."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Un atributo"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="x"/>
					</expression>
					<expression tag="String.Text" Value="que es el componente horizontal de la posición de la expresión, relativa al origen de su expresión padre."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Un atributo"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="y"/>
					</expression>
					<expression tag="String.Text" Value="que es el componente vertical de la posición de la expresión, relativa al origen de su expresión padre."/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Todos los atributos son del tipo"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number" Description="Number"/>
				<expression tag="String.Text" Value="que soporta valores de punto flotante."/>
			</expression>
			<expression tag="String.Text" Value="Métodos:"/>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Los siguientes métodos relativos a la visualización deben implementarse."/>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.MultiParagraph">
					<expression tag="Typesetting.Paragraph">
						<expression tag="String.Text" Value="El método"/>
						<expression tag="Visualization.Code">
							<expression tag="String.Text" Value="prepareDisplay(context)"/>
						</expression>
					</expression>
					<expression tag="Typesetting.Paragraph">
						<expression tag="String.Text" Value="Este método se encarga de calcular las métricas de la expresión, es decir no dibuja nada, sólo realiza los cálculos necesarios para el dibujo mismo."/>
					</expression>
					<expression tag="Typesetting.Paragraph">
						<expression tag="String.Text" Value="El argumento"/>
						<expression tag="Visualization.Code">
							<expression tag="String.Text" Value="context"/>
						</expression>
						<expression tag="String.Text" Value="es del tipo"/>
						<expression tag="Internet.UniformResourceLocator" Value="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D" Description="CanvasRenderingContext2D"/>
						<expression tag="String.Text" Value=", que es la clase normalmente utilizada para manipular contenido gráfico."/>
					</expression>
				</expression>
				<expression tag="Typesetting.MultiParagraph">
					<expression tag="Typesetting.Paragraph">
						<expression tag="String.Text" Value="El método"/>
						<expression tag="Visualization.Code">
							<expression tag="String.Text" Value="display(context, x, y)"/>
						</expression>
					</expression>
					<expression tag="Typesetting.Paragraph">
						<expression tag="String.Text" Value="Este método realiza el dibujo de la expresión."/>
					</expression>
					<expression tag="Typesetting.Paragraph">
						<expression tag="String.Text" Value="Los argumentos"/>
						<expression tag="Visualization.Code">
							<expression tag="String.Text" Value="x"/>
						</expression>
						<expression tag="String.Text" Value="e"/>
						<expression tag="Visualization.Code">
							<expression tag="String.Text" Value="y"/>
						</expression>
						<expression tag="String.Text" Value="indican la posición absoluta del origen del rectángulo de la expresión actual, decir de su esquina superior izquierda."/>
					</expression>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Rule"/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Reglas"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="No todas las instancias de una clase serán visualizadas, puede ser que existan expresiones que se crean para realizar cálculos intermedios, siendo la expresión resultante la única que se visualiza."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="El framewok garantiza que nunca será realizada una llamada al método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="display(context, x, y)"/>
				</expression>
				<expression tag="String.Text" Value="si no ha existido una llamada previa al método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="prepareDisplay(context)"/>
				</expression>
				<expression tag="String.Text" Value="(para un mismo objeto expresión)."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Las llamadas a los métodos"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="prepareDisplay(context)"/>
				</expression>
				<expression tag="String.Text" Value="y"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="display(context, x, y)"/>
				</expression>
				<expression tag="String.Text" Value="no son una a una (para una misma expresión), por cada llamada del método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="prepareDisplay(context)"/>
				</expression>
				<expression tag="String.Text" Value="pueden existir una o varias llamadas al método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="display(context, x, y)"/>
				</expression>
				<expression tag="String.Text" Value="."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Si bien el método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="prepareDisplay(context)"/>
				</expression>
				<expression tag="String.Text" Value="no realiza el dibujo de la expresión, si puede realizar operaciones gráficas necesarias para el cálculo de métricas, por ejemplo cambiar atributos gráficos como el tipo o estilo de letra."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Si la expresión requiere métricas adicionales a las comúnes, puede crearlas. Sin embargo, la forma correcta de hacerlo es que estos sean creados por la llamada al método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="prepareDisplay(context)"/>
				</expression>
				<expression tag="String.Text" Value="y NO como atributos propios de la definición de la clase. A  su vez, estos atributos sólo deberán ser utilizados (consultados) por el método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="display(context, x, y)"/>
				</expression>
				<expression tag="String.Text" Value="."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="El contexto gráfico"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="context"/>
				</expression>
				<expression tag="String.Text" Value="preserva estado, como el tipo de letra o el color de dibujo. Si este debe ser modificado como parte del trabajo que deben hacer los métodos"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="prepareDisplay(context)"/>
				</expression>
				<expression tag="String.Text" Value="y"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="display(context, x, y)"/>
				</expression>
				<expression tag="String.Text" Value=", estos deberán dejar el estado de este contexto en la misma situación en que estaba al principio de la llamada. Esto se logra típicamente guardando el valor del atributo o atributos a ser cambiados, de forma tal que antes de concluír la ejecución del método, puedan ser restaurados."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="El siguiente es un ejemplo del método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="display(context, x, y)"/>
				</expression>
				<expression tag="String.Text" Value="para una expresión que realiza operaciones de dibujo en un color diferente al predefinido:"/>
			</expression>
			<expression tag="Visualization.CodeBlock" Value="display(context, x, y) {&#10;&#9;let bkpStrokeStyle = context.strokeStyle;    // guardar el estilo&#10;&#9;context.strokeStyle = &quot;red&quot;;                 // cambiar el estilo&#10;&#9;&#10;&#9;// Realizar las operaciones gráficas&#10;&#9;// aquellas que utilicen el atributo, por ejemplo trazo de líneas&#10;&#9;// serán dibujadas en color rojo&#10;&#9;&#10;&#9;context.strokeStyle = bkpStrokeStyle;      // restaurar el estilo&#10;}"/>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Si bien son varias las métricas que contiene una expresión, El método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="prepareDisplay(context)"/>
				</expression>
				<expression tag="String.Text" Value="debe calcular y asignar las métricas"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="width"/>
				</expression>
				<expression tag="String.Text" Value=","/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="height"/>
				</expression>
				<expression tag="String.Text" Value=","/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="horzBaseline"/>
				</expression>
				<expression tag="String.Text" Value="y"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="vertBaseline"/>
				</expression>
				<expression tag="String.Text" Value="de si misma, pero NO las mètricas"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="x"/>
				</expression>
				<expression tag="String.Text" Value="e"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="y"/>
				</expression>
				<expression tag="String.Text" Value=", ya que estas sólo deben ser calculadas y asignadas por la expresión padre. Por esta misma razón, una expresón debe calcular y asignar las métricas"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="x"/>
				</expression>
				<expression tag="String.Text" Value="e"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="y"/>
				</expression>
				<expression tag="String.Text" Value="de CADA UNA de sus subexpresiones."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Cuando la expresión tiene subexpresiones, lo mas común es que el método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="prepareDisplay(context)"/>
				</expression>
				<expression tag="String.Text" Value="llame a este mismo método para cada una de las subexpresiones antes de calcular y asignar las métricas, puestas que el cálculo de las métricas de la expresión actual seguramente se requerirá las métricas de cada una de las subexpresiones. Nótese que no es una forma de recursividad, puesto que el método no se invoca para la misma expresión, sino para las subexpresiones."/>
			</expression>
			<expression tag="Null"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Rule"/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Ejemplo"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Se utilizará la expresión de suma para ejemplificar la implementación de la visualización. Es útil estructurar o incluso dibujar en papel un diagrama como el siguiente, que muestre los tamaños, posiciones y métricas tanto de la expresión a visualizar (en este caso la suma) como las de las subexpresiones (los sumandos):"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Visualization.Metrics">
					<expression tag="Math.Arithmetic.Addition">
						<expression tag="Visualization.Selected">
							<expression tag="Visualization.Metrics">
								<expression tag="Visualization.Rectangle" Width="10" Height="10" HorizontalBaseline="5" VerticalBaseline="5"/>
							</expression>
						</expression>
						<expression tag="Visualization.Selected">
							<expression tag="Visualization.Metrics">
								<expression tag="Visualization.Rectangle" Width="10" Height="30" HorizontalBaseline="15" VerticalBaseline="5"/>
							</expression>
						</expression>
						<expression tag="Visualization.Selected">
							<expression tag="Visualization.Metrics">
								<expression tag="Visualization.Rectangle" Width="25" Height="20" HorizontalBaseline="5" VerticalBaseline="5"/>
							</expression>
						</expression>
						<expression tag="Visualization.Selected">
							<expression tag="Visualization.Metrics">
								<expression tag="Visualization.Rectangle" Width="50" Height="50" HorizontalBaseline="45" VerticalBaseline="25"/>
							</expression>
						</expression>
						<expression tag="Visualization.Selected">
							<expression tag="Visualization.Metrics">
								<expression tag="Visualization.Rectangle" Width="10" Height="10" HorizontalBaseline="5" VerticalBaseline="5"/>
							</expression>
						</expression>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="El método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="prepareDisplay(context)"/>
				</expression>
				<expression tag="String.Text" Value="debe realizar lo siguiente:"/>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Primeramente se deben tener calculadas las métricas de las subexpresiones (los sumandos), llamando al método"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="prepareDisplay(context)"/>
					</expression>
					<expression tag="String.Text" Value="de cada una de ellas."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Calcular el ancho del texto del símbolo (+) en la fuente actual."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Posteriormente se deben calcular y fijar las posiciones"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="x"/>
					</expression>
					<expression tag="String.Text" Value="e"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="y"/>
					</expression>
					<expression tag="String.Text" Value="de cada una de ellas de tal forma que queden dispuestas una al lado de otra, permitiendo un espacio para dibujar los símbolos (+), y asegurándose que las líneas base horizontales de cada una de ellas queden alineadas."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Finalmente la expresión de suma ya puede calcular sus propias métricas. Nótese que su línea base horizontal se fija para que también quede alineada a las lìneas base horizontales de los sumandos. La línea base vertical queda a la mitad del ancho de la expresión."/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="El método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="display(context, x, y)"/>
				</expression>
				<expression tag="String.Text" Value="debe realizar lo siguiente:"/>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Dibujar sus subexpresiones, llamando al método"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="display(context, x, y)"/>
					</expression>
					<expression tag="String.Text" Value="de cada uana de ellas."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Dibujar el símbolo (+) entre cada una de las subexpresiones."/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Posiblemente existe confusión entre los argumentos"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="x"/>
				</expression>
				<expression tag="String.Text" Value="e"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="y"/>
				</expression>
				<expression tag="String.Text" Value="y los atributos del mismo nombre de la clase"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="Expression"/>
				</expression>
				<expression tag="String.Text" Value=". Lo siguiente es una versión aproximada del código del método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="display(context, x, y)"/>
				</expression>
				<expression tag="String.Text" Value=":"/>
			</expression>
			<expression tag="Visualization.CodeBlock" Value="Suma = class extends Expression {&#10;&#9;:&#10;&#9;&#10;&#9;prepareDisplay(context) ...&#10;&#9;&#10;&#9;display(context, x, y) {&#10;&#9;&#9;// dibujar cada uno de los sumandos&#10;&#9;&#9;&#10;&#9;&#9;let child;&#10;&#9;&#9;for (let i = 0, n = this.children.length; i &lt; n; ++i) {&#10;&#9;&#9;&#9;child = this.children[i];&#10;&#9;&#9;&#9;child.display(context, x + child.x, y + child.y);&#10;&#9;&#9;}&#10;&#9;&#9;&#10;&#9;&#9;// dibujar los símbolos de suma&#10;&#9;&#9;:&#10;&#9;}&#10;&#9;&#10;&#9;:&#10;}"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Rule"/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Artefactos visuales"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="En este apartado, no debe entenderse el término &quot;artefacto&quot; en el sentido (negativo) que habitualmente tiene dentro de las técnicas de representación visual, ya sean defectos o anomalías, por ejemplo los"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://es.wikipedia.org/wiki/Patr%C3%B3n_de_muar%C3%A9" Description="patrones de moiré."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="En su lugar, deben verse desde el punto de la"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://es.wikipedia.org/wiki/Semiolog%C3%ADa" Description="semiología,"/>
				<expression tag="String.Text" Value="es decir, son elementos simbólicos de naturaleza arbitraria y convencional, pactados"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://es.wikipedia.org/wiki/Est%C3%A1ndar_de_facto" Description="de facto"/>
				<expression tag="String.Text" Value="para una sociedad o cultura. Desde este punto de vista, el estudio de los artefactos visuales son sujetos de estudio del campo de la"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://es.wikipedia.org/wiki/Interacci%C3%B3n_persona-computadora" Description="interacción hombre-máquina."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="También debe entenderse que un artefacto no forma parte esencial de una expresión, sino que es un elemento visual adicional, utilizado para indicar la semántica, para eliminar ambigüedad en la semántica, o simplemente como elemento decorativo."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Paréntesis"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Uno de los artefactos visuales mas conocidos son los paréntesis, de uso ámplio tanto en las matemáticas como en los lenguajes de programación textuales."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Considere la siguiente expresión, provista como árbol invertido:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Diagramming.Tree" Expanded="True">
					<expression tag="String.Text" Value="×"/>
					<expression tag="Diagramming.Tree" Expanded="True">
						<expression tag="Symbolic.Symbol" Name="a"/>
					</expression>
					<expression tag="Diagramming.Tree" Expanded="True">
						<expression tag="String.Text" Value="+"/>
						<expression tag="Diagramming.Tree" Expanded="True">
							<expression tag="Symbolic.Symbol" Name="b"/>
						</expression>
						<expression tag="Diagramming.Tree" Expanded="True">
							<expression tag="Symbolic.Symbol" Name="c"/>
						</expression>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Uno de los beneficios de estructurar expresiones de esta forma es que no existe ambigüedad en como se agrupan las expresiones unas con otras. No son necesarios los conceptos como la"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://es.wikipedia.org/wiki/Orden_de_evaluaci%C3%B3n" Description="precedencia"/>
				<expression tag="String.Text" Value="o la"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Operator_associativity" Description="asociatividad."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Sin embargo, al momento de mostrar la expresión de una forma natural para los humanos o para lenguajes de programación textuales, si es necesario mostrar paréntesis en algunas ocasiones. Para nuestro ejemplo, la expresión debe mostrarse como:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Math.Arithmetic.Multiplication">
					<expression tag="Symbolic.Symbol" Name="a"/>
					<expression tag="Math.Arithmetic.Addition">
						<expression tag="Symbolic.Symbol" Name="b"/>
						<expression tag="Symbolic.Symbol" Name="c"/>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Sin éstos, la expresión tiene un significado distinto:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Math.Arithmetic.Addition">
					<expression tag="Math.Arithmetic.Multiplication">
						<expression tag="Symbolic.Symbol" Name="a"/>
						<expression tag="Symbolic.Symbol" Name="b"/>
					</expression>
					<expression tag="Symbolic.Symbol" Name="c"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="La idea de las visualizaciones en el lengueje Fōrmulæ es que estas determinen por si solas cuando las expresiones deban mostrarse con paréntesis, sin que el usuario final tenga que especificarlos expresamente, dicho de otra manera, los paréntesis son artefactos visuales que la implementación de visualización de expresiones deben automáticamente ser determinados y mostrados. No existe una expresión de parémtesis cuya función sea agrupar un conjunto de expresiones."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="El mecanismo mas común para determinar la precedencia y asociatividad de operaciones es utilizar una tabla que indique los valores de precedencia (usualmente como un número), y aquellos que tengan la misma, aparecer en un mismo rango pero indicando una asociatividad distinta (típicamente como una lista ordenada, de mayor a menor asociatividad)."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Sin embargo, eso no puede hacerse con el lenguaje Fōrmulæ, ya que no cuenta con un conjunto predefinido de operadores, en cualquier momento puede el lenguaje extenderse con expresiones nuevas."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="En Fōrmulæ, existe una regla relativamente simple: Una expresión no decide si debe mostrarse a si misma entre paréntesis, sino una expresión padre decide si una (o varias) de sus subexpresiones deben mostrarse entre paréntesis (como parte de su implementación del método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="prepareDisplay(context)"/>
				</expression>
				<expression tag="String.Text" Value="), así como realmente hacerlo dentro de su implementación del método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="display(context, x, y)"/>
				</expression>
				<expression tag="String.Text" Value="."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="La expresión reconoce la naturaleza &quot;visual&quot; de cada una de sus subexpresiones ya que existen métodos de la clase"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="Expression"/>
				</expression>
				<expression tag="String.Text" Value="que lo indican. Dichos métodos son:"/>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.MultiParagraph">
					<expression tag="Typesetting.Paragraph">
						<expression tag="String.Text" Value="El método"/>
						<expression tag="Visualization.Code">
							<expression tag="String.Text" Value="parenthesesAsOperator()"/>
						</expression>
						<expression tag="String.Text" Value="regresa un valor booleano y su implementación por defecto regresa"/>
						<expression tag="Typesetting.ItalicChunk">
							<expression tag="String.Text" Value="falso."/>
						</expression>
						<expression tag="String.Text" Value="Una implementación de expresión puede sobrrescribirlo para indicar que la visualización de la expresión distribuye sus subexpresiones una a una de una manera primordialmente horizontal. Básicamente indica que si una expresión &quot;hermana&quot; se coloca a la izquierda  o a la derecha de la expresión actual, generará una apariencia que confundirá la semántica de las expresiones."/>
						<expression tag="String.Text" Value="El ejercicio previo de suma donde un sumando es una multiplicación es un ejemplo de este tipo, las expresión de suma debería implementar el método"/>
						<expression tag="Visualization.Code">
							<expression tag="String.Text" Value="parenthesesAsOperator()"/>
						</expression>
						<expression tag="String.Text" Value="para regresar un valor"/>
						<expression tag="Typesetting.ItalicChunk">
							<expression tag="String.Text" Value="verdadero."/>
						</expression>
					</expression>
					<expression tag="Typesetting.Paragraph">
						<expression tag="String.Text" Value="Algunos ejemplos de expresiones de este tipo son aquellas sque se visualizan como operaciones infijas de asociatividad baja, como la suma, pero no la multiplicación, por ser de asociatividad alta."/>
					</expression>
				</expression>
				<expression tag="Typesetting.MultiParagraph">
					<expression tag="Typesetting.Paragraph">
						<expression tag="String.Text" Value="El método"/>
						<expression tag="Visualization.Code">
							<expression tag="String.Text" Value="parenthesesWhenSuperSubscripted()"/>
						</expression>
						<expression tag="String.Text" Value="regresa un valor booleano y su implementación por defecto regresa"/>
						<expression tag="Typesetting.ItalicChunk">
							<expression tag="String.Text" Value="falso."/>
						</expression>
						<expression tag="String.Text" Value="Una implementación de expresión puede sobrrescribirlo para indicar que la expresi+on tiene dos subexpresiones, y que la segunda se muestra ya sea como superíndice o como subíndice de la primera."/>
					</expression>
					<expression tag="Typesetting.Paragraph">
						<expression tag="String.Text" Value="Ejemplos de expresiones de este tipo son la exponenciación o la operación de obtener una subexpresión de otra, como en"/>
						<expression tag="Expression.Child">
							<expression tag="Symbolic.Symbol" Name="x"/>
							<expression tag="Symbolic.Symbol" Name="i"/>
						</expression>
						<expression tag="String.Text" Value="(obtener el i-sima subexpresión de"/>
						<expression tag="Symbolic.Symbol" Name="x"/>
						<expression tag="String.Text" Value=")."/>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Nótese que aunque una expresión reescriba alguno de los métodos"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="parenthesesAsOperator()"/>
				</expression>
				<expression tag="String.Text" Value="y"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="parenthesesWhenSuperSubscripted()"/>
				</expression>
				<expression tag="String.Text" Value=", para que regresen el valor"/>
				<expression tag="Typesetting.ItalicChunk">
					<expression tag="String.Text" Value="verdadero,"/>
				</expression>
				<expression tag="String.Text" Value="NO significa que estos deban mostrarse dentro de paréntesis, la expresión padre deberá decidir, de acuerdo a su propia forma de visualización, si la subexpresión deba mostrarse en paréntesis. Por ejemplo, la expresión de suma debe regresar el valor"/>
				<expression tag="Typesetting.ItalicChunk">
					<expression tag="String.Text" Value="verdadero"/>
				</expression>
				<expression tag="String.Text" Value="en la implementación del método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="parenthesesAsOperator()"/>
				</expression>
				<expression tag="String.Text" Value=", el cual es de utilidad de una expresión padre de multiplicación, para que muestre paréntesis como en el ejemplo"/>
				<expression tag="Math.Arithmetic.Multiplication">
					<expression tag="Symbolic.Symbol" Name="a"/>
					<expression tag="Math.Arithmetic.Addition">
						<expression tag="Symbolic.Symbol" Name="b"/>
						<expression tag="Symbolic.Symbol" Name="c"/>
					</expression>
				</expression>
				<expression tag="String.Text" Value=", sin embargo para la expresión de división no es de utilidad, puesto que esta propiedad no le sirve para determinar si la subexpresión deba mostrarse en paréntesis, como en"/>
				<expression tag="Math.Arithmetic.Division">
					<expression tag="Symbolic.Symbol" Name="a"/>
					<expression tag="Math.Arithmetic.Addition">
						<expression tag="Symbolic.Symbol" Name="b"/>
						<expression tag="Symbolic.Symbol" Name="c"/>
					</expression>
				</expression>
				<expression tag="String.Text" Value=". Otras expresiones nunca llaman a los métodos"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="parenthesesAsOperator()"/>
				</expression>
				<expression tag="String.Text" Value="o"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="parenthesesWhenSuperSubscripted()"/>
				</expression>
				<expression tag="String.Text" Value="debido a que sus subexpresiones nunca se muestran con paréntesis, sin importar de que tipo sean, por ejemplo en una raíz cuadrada"/>
				<expression tag="Math.Arithmetic.SquareRoot">
					<expression tag="Math.Arithmetic.Exponentiation">
						<expression tag="Symbolic.Symbol" Name="x"/>
						<expression tag="Math.Number" Value="10"/>
					</expression>
				</expression>
				<expression tag="String.Text" Value="(nunca se utiliza de la forma"/>
				<expression tag="Math.Arithmetic.SquareRoot">
					<expression tag="Visualization.Parentheses">
						<expression tag="Math.Arithmetic.Exponentiation">
							<expression tag="Symbolic.Symbol" Name="x"/>
							<expression tag="Math.Number" Value="10"/>
						</expression>
					</expression>
				</expression>
				<expression tag="String.Text" Value="), o los elementos de una lista o arreglo:"/>
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="x"/>
					<expression tag="Symbolic.Symbol" Name="y"/>
					<expression tag="Symbolic.Symbol" Name="z"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="El método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="drawParenthesesAround(context, x, y)"/>
				</expression>
				<expression tag="String.Text" Value="Dibuja el par de paréntesis alrededor de la expresión que lo invoca. Los argumentos"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="x"/>
				</expression>
				<expression tag="String.Text" Value="e"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="y"/>
				</expression>
				<expression tag="String.Text" Value="definen la posición absoluta del origen de la expresión. Debe ser invocado exclsuivamente dentro del método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="display(context, x, y)"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Rule"/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Transitabilidad"/>
					<expression tag="Typesetting.ItalicChunk">
						<expression tag="String.Text" Value="(traversability)"/>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Si bien el entorno en que se muestran y editan expresiones es gráfico, y por lo tanto utilizable con la ayuda de un dispositivo que permita operaciones"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Point_and_click" Description="point and click"/>
				<expression tag="String.Text" Value="(por ejemplo un ratón). Sin embargo, usuarios y programadores mas experimentados encuentran útil para la edición de expresiones, la utilización adicional del teclado."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="La transitabilidad es la capacidad de seleccionar"/>
				<expression tag="Typesetting.ItalicChunk">
					<expression tag="String.Text" Value="cualquier"/>
				</expression>
				<expression tag="String.Text" Value="expresión o subexpresión, por muy compleja que sea,  sólamente utilizando las teclas de flecha, y la tecla"/>
				<expression tag="Visualization.Key">
					<expression tag="String.Text" Value="ESC"/>
				</expression>
				<expression tag="String.Text" Value=". Se puede resumir en lo siguiente:"/>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Dado una expresión que está seleccionada, sea o no una expresión final, la utilización de una de las teclas de flecha hace que se seleccione una expresión, siempre final, acorde a la dirección seleccionada. La nueva expresión no necesariamente debe ser &quot;hermana&quot; de la expresión seleccionada actualmente."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="La utilización de la tecla"/>
					<expression tag="Visualization.Key">
						<expression tag="String.Text" Value="ESC"/>
					</expression>
					<expression tag="String.Text" Value="hace que la expresión padre de la expresión seleccionada, de existir, pase a ser la nueva expresión seleccionada."/>
				</expression>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="List.Table">
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Ejemplo"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Tecla"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Resultado"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Symbolic.Symbol" Name="a"/>
								<expression tag="Visualization.Selected">
									<expression tag="Symbolic.Symbol" Name="b"/>
								</expression>
								<expression tag="Symbolic.Symbol" Name="c"/>
							</expression>
							<expression tag="Visualization.Key">
								<expression tag="String.Text" Value=" ▸ "/>
							</expression>
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Symbolic.Symbol" Name="a"/>
								<expression tag="Symbolic.Symbol" Name="b"/>
								<expression tag="Visualization.Selected">
									<expression tag="Symbolic.Symbol" Name="c"/>
								</expression>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Arithmetic.Multiplication">
								<expression tag="Math.Arithmetic.Addition">
									<expression tag="Symbolic.Symbol" Name="a"/>
									<expression tag="Visualization.Selected">
										<expression tag="Symbolic.Symbol" Name="b"/>
									</expression>
								</expression>
								<expression tag="Math.Arithmetic.Addition">
									<expression tag="Symbolic.Symbol" Name="c"/>
									<expression tag="Symbolic.Symbol" Name="d"/>
								</expression>
							</expression>
							<expression tag="Visualization.Key">
								<expression tag="String.Text" Value=" ▸ "/>
							</expression>
							<expression tag="Math.Arithmetic.Multiplication">
								<expression tag="Math.Arithmetic.Addition">
									<expression tag="Symbolic.Symbol" Name="a"/>
									<expression tag="Symbolic.Symbol" Name="b"/>
								</expression>
								<expression tag="Math.Arithmetic.Addition">
									<expression tag="Visualization.Selected">
										<expression tag="Symbolic.Symbol" Name="c"/>
									</expression>
									<expression tag="Symbolic.Symbol" Name="d"/>
								</expression>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Arithmetic.Division">
								<expression tag="Visualization.Selected">
									<expression tag="Symbolic.Symbol" Name="a"/>
								</expression>
								<expression tag="Symbolic.Symbol" Name="b"/>
							</expression>
							<expression tag="Visualization.Key">
								<expression tag="String.Text" Value=" ▾ "/>
							</expression>
							<expression tag="Math.Arithmetic.Division">
								<expression tag="Symbolic.Symbol" Name="a"/>
								<expression tag="Visualization.Selected">
									<expression tag="Symbolic.Symbol" Name="b"/>
								</expression>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Symbolic.Symbol" Name="x"/>
								<expression tag="Math.Arithmetic.SquareRoot">
									<expression tag="Visualization.Selected">
										<expression tag="Symbolic.Symbol" Name="y"/>
									</expression>
								</expression>
							</expression>
							<expression tag="Visualization.Key">
								<expression tag="String.Text" Value=" ◂ "/>
							</expression>
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Visualization.Selected">
									<expression tag="Symbolic.Symbol" Name="x"/>
								</expression>
								<expression tag="Math.Arithmetic.SquareRoot">
									<expression tag="Symbolic.Symbol" Name="y"/>
								</expression>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Arithmetic.Division">
								<expression tag="Math.Arithmetic.Multiplication">
									<expression tag="Visualization.Selected">
										<expression tag="Visualization.Parentheses">
											<expression tag="Math.Arithmetic.Addition">
												<expression tag="Symbolic.Symbol" Name="a"/>
												<expression tag="Symbolic.Symbol" Name="b"/>
											</expression>
										</expression>
									</expression>
									<expression tag="Math.Arithmetic.Addition">
										<expression tag="Symbolic.Symbol" Name="c"/>
										<expression tag="Symbolic.Symbol" Name="d"/>
									</expression>
								</expression>
								<expression tag="Math.Number" Value="2"/>
							</expression>
							<expression tag="Visualization.Key">
								<expression tag="String.Text" Value=" ▾ "/>
							</expression>
							<expression tag="Math.Arithmetic.Division">
								<expression tag="Math.Arithmetic.Multiplication">
									<expression tag="Math.Arithmetic.Addition">
										<expression tag="Symbolic.Symbol" Name="a"/>
										<expression tag="Symbolic.Symbol" Name="b"/>
									</expression>
									<expression tag="Math.Arithmetic.Addition">
										<expression tag="Symbolic.Symbol" Name="c"/>
										<expression tag="Symbolic.Symbol" Name="d"/>
									</expression>
								</expression>
								<expression tag="Visualization.Selected">
									<expression tag="Math.Number" Value="2"/>
								</expression>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Symbolic.Assignment">
								<expression tag="Visualization.Selected">
									<expression tag="Symbolic.Symbol" Name="x"/>
								</expression>
								<expression tag="Math.Trigonometric.Sine">
									<expression tag="Math.Arithmetic.Addition">
										<expression tag="Symbolic.Symbol" Name="a"/>
										<expression tag="Symbolic.Symbol" Name="b"/>
									</expression>
								</expression>
							</expression>
							<expression tag="Visualization.Key">
								<expression tag="String.Text" Value=" ▸ "/>
							</expression>
							<expression tag="Symbolic.Assignment">
								<expression tag="Symbolic.Symbol" Name="x"/>
								<expression tag="Math.Trigonometric.Sine">
									<expression tag="Math.Arithmetic.Addition">
										<expression tag="Visualization.Selected">
											<expression tag="Symbolic.Symbol" Name="a"/>
										</expression>
										<expression tag="Symbolic.Symbol" Name="b"/>
									</expression>
								</expression>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Math.Number" Value="2"/>
								<expression tag="Math.Arithmetic.Multiplication">
									<expression tag="Visualization.Selected">
										<expression tag="Math.Number" Value="3"/>
									</expression>
									<expression tag="Math.Complex.ImaginaryUnit"/>
								</expression>
							</expression>
							<expression tag="Visualization.Key">
								<expression tag="String.Text" Value=" ▸ "/>
							</expression>
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Math.Number" Value="2"/>
								<expression tag="Math.Arithmetic.Multiplication">
									<expression tag="Math.Number" Value="3"/>
									<expression tag="Visualization.Selected">
										<expression tag="Math.Complex.ImaginaryUnit"/>
									</expression>
								</expression>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Arithmetic.Division">
								<expression tag="Math.Number" Value="3"/>
								<expression tag="Math.Arithmetic.Division">
									<expression tag="Visualization.Selected">
										<expression tag="Symbolic.Symbol" Name="a"/>
									</expression>
									<expression tag="Symbolic.Symbol" Name="b"/>
								</expression>
							</expression>
							<expression tag="Visualization.Key">
								<expression tag="String.Text" Value=" ▴ "/>
							</expression>
							<expression tag="Math.Arithmetic.Division">
								<expression tag="Visualization.Selected">
									<expression tag="Math.Number" Value="3"/>
								</expression>
								<expression tag="Math.Arithmetic.Division">
									<expression tag="Symbolic.Symbol" Name="a"/>
									<expression tag="Symbolic.Symbol" Name="b"/>
								</expression>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Math.Number" Value="1"/>
								<expression tag="Math.Arithmetic.SquareRoot">
									<expression tag="Visualization.Selected">
										<expression tag="Symbolic.Symbol" Name="x"/>
									</expression>
								</expression>
							</expression>
							<expression tag="Visualization.Key">
								<expression tag="String.Text" Value="ESC"/>
							</expression>
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Math.Number" Value="1"/>
								<expression tag="Visualization.Selected">
									<expression tag="Math.Arithmetic.SquareRoot">
										<expression tag="Symbolic.Symbol" Name="x"/>
									</expression>
								</expression>
							</expression>
						</expression>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Las implementaciones de la clase"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="Expression"/>
				</expression>
				<expression tag="String.Text" Value="deben definir comportamiento relativo a la transitabilidad sobreescribiendo los siguientes métodos:"/>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="El atributo"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="Expression.UP"/>
					</expression>
					<expression tag="String.Text" Value="sirve para indicar la dirección hacia arriba."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="El atributo"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="Expression.DOWN"/>
					</expression>
					<expression tag="String.Text" Value="sirve para indicar la dirección hacia abajo."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="El atributo"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="Expression.PREVIOUS"/>
					</expression>
					<expression tag="String.Text" Value="sirve para indicar la dirección hacia atras en el sentido del texto, corresponde a la izquierda en texto"/>
					<expression tag="Typesetting.ItalicChunk">
						<expression tag="String.Text" Value="izquierda a derecha"/>
					</expression>
					<expression tag="String.Text" Value="y a la derecha en texto"/>
					<expression tag="Typesetting.ItalicChunk">
						<expression tag="String.Text" Value="derecha a izquierda"/>
					</expression>
					<expression tag="String.Text" Value="utilizado en algunos idiomas como el árabe o el hebreo."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="El atributo"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="Expression.NEXT"/>
					</expression>
					<expression tag="String.Text" Value="sirve para indicar la dirección hacia adelante en el sentido del texto, corresponde a la derecha en texto"/>
					<expression tag="Typesetting.ItalicChunk">
						<expression tag="String.Text" Value="izquierda a derecha"/>
					</expression>
					<expression tag="String.Text" Value="y a la izquierda en texto"/>
					<expression tag="Typesetting.ItalicChunk">
						<expression tag="String.Text" Value="derecha a izquierda."/>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Los siguientes métodos regresan una referencia a objeto"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="Expression"/>
				</expression>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="El método"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="Expression.moveOut(direction)"/>
					</expression>
					<expression tag="String.Text" Value="(no reescribible) se invoca cuando una expresión delega a su expresión padre la petición de moverse en la dirección indicada. Puede regresar el valor"/>
					<expression tag="Typesetting.ItalicChunk">
						<expression tag="String.Text" Value="nulo"/>
					</expression>
					<expression tag="String.Text" Value="indicando que la expresión no cuenta con expresión padre."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="El método"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="Expression.moveAcross(i, direction)"/>
					</expression>
					<expression tag="String.Text" Value="Dado el índice de subexpresión y una dirección, este método indica a cuál de sus otras subexpresiones se debe &quot;mover&quot; la selección. Si"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="child"/>
					</expression>
					<expression tag="String.Text" Value="es la subexpresión de &quot;destino&quot;, no debe regresar esta, sino el valor devuelto por"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="child.moveTo(direction)"/>
					</expression>
					<expression tag="String.Text" Value="a fin de que dicha subexpresión elija, recursivamente, la expresión final. Si ninguna de las subexpresiones es aplicable, debe regresar"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="this.moveOut(direction)"/>
					</expression>
					<expression tag="String.Text" Value="a fin de delegar la decisión a la expresión padre."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="El método"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="Expression.moveTo(direction)"/>
					</expression>
					<expression tag="String.Text" Value="Este método debe regresar la subexpresión que debe ser seleccionada cuando se &quot;incide&quot; desde la dirección especificada &quot;desde afuera&quot; hacia la expresión actual. Al iual que el caso anterior, una vez determinada debe devolver el valor generado por el método"/>
					<expression tag="Visualization.Code">
						<expression tag="String.Text" Value="Expression.moveTo(direction)"/>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Nota. Si la expresión que se está implementando es final, es decir, si no tiene subexpresiones, no es necesario implementar los métodos"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="Expression.moveAcross(i, direction)"/>
				</expression>
				<expression tag="String.Text" Value="y"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="Expression.moveTo(direction)"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Ejemplo."/>
				</expression>
				<expression tag="String.Text" Value="Expresión que se muestra de manera"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://es.wikipedia.org/wiki/Notaci%C3%B3n_de_infijo" Description="infija."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Para implementar el método"/>
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Expression.moveAcross(i, direction)"/>
				</expression>
				<expression tag="String.Text" Value=", refiérase a la siguiente figura, que es una expresión con"/>
				<expression tag="Symbolic.Symbol" Name="n"/>
				<expression tag="String.Text" Value="subexpresiones"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Visualization.FontSizeIncrement" Increment="6">
					<expression tag="Visualization.HorizontalArray">
						<expression tag="Visualization.Color" Red="1" Green="0" Blue="0" Alpha="1">
							<expression tag="String.Text" Value="⇠"/>
						</expression>
						<expression tag="Visualization.VerticalArray">
							<expression tag="Visualization.Color" Red="1" Green="0" Blue="0" Alpha="1">
								<expression tag="String.Text" Value="⇡"/>
							</expression>
							<expression tag="Visualization.Selected">
								<expression tag="Null"/>
							</expression>
							<expression tag="Visualization.Color" Red="1" Green="0" Blue="0" Alpha="1">
								<expression tag="String.Text" Value="⇣"/>
							</expression>
						</expression>
						<expression tag="String.Text" Value="⇄"/>
						<expression tag="Visualization.VerticalArray">
							<expression tag="Visualization.Color" Red="1" Green="0" Blue="0" Alpha="1">
								<expression tag="String.Text" Value="⇡"/>
							</expression>
							<expression tag="Visualization.Selected">
								<expression tag="Null"/>
							</expression>
							<expression tag="Visualization.Color" Red="1" Green="0" Blue="0" Alpha="1">
								<expression tag="String.Text" Value="⇣"/>
							</expression>
						</expression>
						<expression tag="String.Text" Value="⇄"/>
						<expression tag="Visualization.VerticalArray">
							<expression tag="Visualization.Color" Red="1" Green="0" Blue="0" Alpha="1">
								<expression tag="String.Text" Value="⇡"/>
							</expression>
							<expression tag="Visualization.Selected">
								<expression tag="Null"/>
							</expression>
							<expression tag="Visualization.Color" Red="1" Green="0" Blue="0" Alpha="1">
								<expression tag="String.Text" Value="⇣"/>
							</expression>
						</expression>
						<expression tag="String.Text" Value="⇄ ⋯ ⇄"/>
						<expression tag="Visualization.VerticalArray">
							<expression tag="Visualization.Color" Red="1" Green="0" Blue="0" Alpha="1">
								<expression tag="String.Text" Value="⇡"/>
							</expression>
							<expression tag="Visualization.Selected">
								<expression tag="Null"/>
							</expression>
							<expression tag="Visualization.Color" Red="1" Green="0" Blue="0" Alpha="1">
								<expression tag="String.Text" Value="⇣"/>
							</expression>
						</expression>
						<expression tag="Visualization.Color" Red="1" Green="0" Blue="0" Alpha="1">
							<expression tag="String.Text" Value="⇢"/>
						</expression>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Se puede observar lo siguiente:"/>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Solamente se puede seleccionar la subexpresión que está a la derecha, si para el índice de expresión seleccionada"/>
					<expression tag="Symbolic.Symbol" Name="i"/>
					<expression tag="String.Text" Value="(basado en 1, no en 0) se cumple:"/>
					<expression tag="Relation.LessOrEquals">
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Visualization.Spurious">
							<expression tag="Relation.Less">
								<expression tag="Symbolic.Symbol" Name="i"/>
								<expression tag="Symbolic.Symbol" Name="n"/>
							</expression>
						</expression>
					</expression>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Solamente se puede seleccionar la subexpresión que está a la izquierda, si para el índice de expresión seleccionada"/>
					<expression tag="Symbolic.Symbol" Name="i"/>
					<expression tag="String.Text" Value="se cumple:"/>
					<expression tag="Relation.Less">
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Visualization.Spurious">
							<expression tag="Relation.LessOrEquals">
								<expression tag="Symbolic.Symbol" Name="i"/>
								<expression tag="Symbolic.Symbol" Name="n"/>
							</expression>
						</expression>
					</expression>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Cualquier otra combinación de índice y dirección, hace que la selección deba &quot;salir&quot; de la expresión"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Por lo que una implementación del método quedaría como sigue:"/>
			</expression>
			<expression tag="Visualization.CodeBlock" Value="moveAcross(i, direction) {&#10;&#9;if (direction == Expression.PREVIOUS) {&#10;&#9;&#9;if (i &gt; 0) {&#10;&#9;&#9;&#9;return this.children[i - 1].moveTo(direction);&#10;&#9;&#9;}&#10;&#9;}&#10;&#9;else if (direction == Expression.NEXT) {&#10;&#9;&#9;if (i &lt; this.children.length - 1) {&#10;&#9;&#9;&#9;return this.children[i + 1].moveTo(direction);&#10;&#9;&#9;}&#10;&#9;}&#10;&#9;&#10;&#9;return this.moveOut(direction);&#10;}&#10;"/>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Para implementar el método"/>
				<expression tag="Visualization.Code">
					<expression tag="String.Text" Value="Expression.moveTo(direction)"/>
				</expression>
				<expression tag="String.Text" Value=", refiérase a la siguiente figura:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Visualization.FontSizeIncrement" Increment="6">
					<expression tag="Visualization.HorizontalArray">
						<expression tag="String.Text" Value="⇢"/>
						<expression tag="Visualization.VerticalArray">
							<expression tag="String.Text" Value="⇣"/>
							<expression tag="Visualization.Selected">
								<expression tag="Null"/>
							</expression>
							<expression tag="String.Text" Value="⇡"/>
						</expression>
						<expression tag="String.Text" Value="+"/>
						<expression tag="Visualization.Selected">
							<expression tag="Null"/>
						</expression>
						<expression tag="String.Text" Value="+"/>
						<expression tag="Visualization.Selected">
							<expression tag="Null"/>
						</expression>
						<expression tag="String.Text" Value="+ ⋯ +"/>
						<expression tag="Visualization.Selected">
							<expression tag="Null"/>
						</expression>
						<expression tag="String.Text" Value="⇠"/>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Se puede observar lo siguiente:"/>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Si la dirección es a la izquerda (desde el punto de vista de &quot;afuera&quot;), la subexpresión a seleccionar es la última."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Cualquier otra dirección, hace que la subexpresión a seleccionar sea la primera."/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Por lo que una implementación del método quedaría como sigue:"/>
			</expression>
			<expression tag="Visualization.CodeBlock" Value="moveTo(direction) {&#10;&#9;if (direction == Expression.PREVIOUS) {&#10;&#9;&#9;return this.children[this.children.length - 1].moveTo(direction);&#10;&#9;}&#10;&#9;else {&#10;&#9;&#9;return this.children[0].moveTo(direction);&#10;&#9;}&#10;}"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Rule"/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Autor: Laurence Ruiz Ugalde"/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Ultima vez modificado:"/>
				<expression tag="Time.Time" Value="1738178220000"/>
			</expression>
		</expression>
	</expression>
</expression>
