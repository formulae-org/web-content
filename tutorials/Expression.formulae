<expression tag="Formulae.Script" Modules="org.formulae.typesetting,org.formulae.text.string,org.formulae.math.arithmetic,org.formulae.diagramming,org.formulae.list,org.formulae.visualization,org.formulae.symbolic">
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Expression tutorial"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="This tutorial is dedicated to two group of expressions:"/>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Expressions that can be applied to a wide range of other expressions, from several other categories and hence they cannot be discussed in all of them, because it would derive in much redundancy."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="Expression related to"/>
					<expression tag="Typesetting.BoldChunk">
						<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Metaprogramming" Description="metaprogramming."/>
					</expression>
					<expression tag="String.Text" Value="It is the capacity for a program to construct and execute other programs."/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="In any case, they are referred to how expressions are internally represented, and how they are reduced (evalaued or executed)."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Structure of expressions"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Expressions can contain expressions."/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="In Fōrmulæ, expression are represented in a format more comprensible for humans, usually called"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Prettyprint" Description="pretty print."/>
				<expression tag="String.Text" Value="However, all them have internally a regular, very structured and defined representation. This representation is named"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Abstract_syntax_tree" Description="abstract syntax tree,"/>
				<expression tag="String.Text" Value="Basically it is like an inverted"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Tree_structure" Description="tree,"/>
				<expression tag="String.Text" Value="a structure to represent information in a hierarchical form of expressions containing expressions (subexpressions)."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="For example, the expression"/>
				<expression tag="Math.Arithmetic.Division">
					<expression tag="Math.Arithmetic.SquareRoot">
						<expression tag="Math.Number" Value="5"/>
					</expression>
					<expression tag="Math.Arithmetic.Addition">
						<expression tag="Math.Arithmetic.Exponentiation">
							<expression tag="Math.Number" Value="3"/>
							<expression tag="Math.Number" Value="2"/>
						</expression>
						<expression tag="Math.Number" Value="8"/>
					</expression>
				</expression>
				<expression tag="String.Text" Value="internally is like the following:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Diagramming.Tree" Expanded="True">
					<expression tag="String.Text" Value="÷"/>
					<expression tag="Diagramming.Tree" Expanded="True">
						<expression tag="String.Text" Value="square root"/>
						<expression tag="Diagramming.Tree" Expanded="True">
							<expression tag="Math.Number" Value="5"/>
						</expression>
					</expression>
					<expression tag="Diagramming.Tree" Expanded="True">
						<expression tag="String.Text" Value="+"/>
						<expression tag="Diagramming.Tree" Expanded="True">
							<expression tag="String.Text" Value="exponentiation"/>
							<expression tag="Diagramming.Tree" Expanded="True">
								<expression tag="Math.Number" Value="3"/>
							</expression>
							<expression tag="Diagramming.Tree" Expanded="True">
								<expression tag="Math.Number" Value="2"/>
							</expression>
						</expression>
						<expression tag="Diagramming.Tree" Expanded="True">
							<expression tag="Math.Number" Value="8"/>
						</expression>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The uppermost expression is called &quot;root expression&quot;. Expressions with no subexpressions are called &quot;leaf expressions&quot;."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Tags"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="In order that expressions can be distinguised, every expression has a string called"/>
				<expression tag="Typesetting.ItalicChunk">
					<expression tag="String.Text" Value="tag"/>
				</expression>
				<expression tag="String.Text" Value="that defines the type of the expression. All the leaf expression of the previous example have the same tag:"/>
				<expression tag="String.String" Value="Math.Number"/>
				<expression tag="String.Text" Value=". The root expression has the tag"/>
				<expression tag="String.String" Value="Math.Arithmetic.Division"/>
				<expression tag="String.Text" Value="."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Subexpressions"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="As it was already noted, expressions can have zero, one or many subexpressions. The number of subexpressiones and the entity they represent depends on the tag. See the following examples:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="List.Table">
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Tag"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Number of permitted subexpressions"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="What the subexpression is, according to its position i"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="String.String" Value="Math.Number"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="String.Text" Value="none"/>
						</expression>
						<expression tag="List.List">
							<expression tag="String.String" Value="Math.Arithmetic.Addition"/>
							<expression tag="String.Text" Value="2 or more"/>
							<expression tag="String.Text" Value="The i-th addend"/>
						</expression>
						<expression tag="List.List">
							<expression tag="String.String" Value="Math.Arithmetic.Multiplication"/>
							<expression tag="String.Text" Value="2 or more"/>
							<expression tag="String.Text" Value="The i-th factor"/>
						</expression>
						<expression tag="List.List">
							<expression tag="String.String" Value="Math.Arithmetic.Division"/>
							<expression tag="String.Text" Value="Exacyly 2"/>
							<expression tag="String.Text" Value="The first one is the numerator, the second one is the denominator"/>
						</expression>
						<expression tag="List.List">
							<expression tag="String.String" Value="Math.Arithmetic.Exponentiation"/>
							<expression tag="String.Text" Value="Exacyly 2"/>
							<expression tag="String.Text" Value="The first one is the base, the second one is the exponent"/>
						</expression>
						<expression tag="List.List">
							<expression tag="String.String" Value="List.List"/>
							<expression tag="String.Text" Value="Any, including zero"/>
							<expression tag="String.Text" Value="The i-th elements of the list"/>
						</expression>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="State"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Several types of expressions have additional information called"/>
				<expression tag="Typesetting.ItalicChunk">
					<expression tag="String.Text" Value="state."/>
				</expression>
				<expression tag="String.Text" Value="The state is a set of one or more pairs attribute-value. If an expression has state, all expressions having the same tag will also have state, specifically the same attributes, but possibly different values."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="In the previous example, all the leaf expressions have the tag"/>
				<expression tag="String.String" Value="Math.Number"/>
				<expression tag="String.Text" Value="However, all of them have an attribute (for this specific tag, called &quot;Value&quot;) associated with data that represents what we know as number. One of these expression holds data that represents the number 5, the other one holds data that represents the number 3, etc."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="The process of reduction"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="..."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Symbolic.Symbol" Name="x"/>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="Symbolic.Symbol" Name="x"/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Author: Laurence R. Ugalde"/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Created: April 11, 2021. Last modified: March 3, 2021"/>
			</expression>
		</expression>
	</expression>
</expression>