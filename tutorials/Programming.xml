<expression tag="Formulae.Script"><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="Programming tutorial"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="In this tutorial, you will know the expressions relative to programming, specifically for"/><expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Structured_programming" Description="structured programming,"/><expression tag="String.Text" Value="a style of programming which is simple but powerful."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Structured programming"/><expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Structured_program_theorem" Description="states"/><expression tag="String.Text" Value="that every possible"/><expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Algorithm" Description="algorithm"/><expression tag="String.Text" Value="(a set of instruction to solve a computational problem) can be defined by the use of the following strructues:"/></expression><expression tag="Typesetting.BulletedList"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="Sequence."/></expression><expression tag="String.Text" Value="A structure that let several instrucctions execute, one after the other."/></expression><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="Selection."/></expression><expression tag="String.Text" Value="Structures that allow the flow of execution take different branches, according to one or several conditions."/></expression><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="Iteration."/></expression><expression tag="String.Text" Value="Structures to allow that a part of a program can be executed more than one time."/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.Block" Description="Block"/><expression tag="String.Text" Value="expression"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.Block" Description="Block"/><expression tag="String.Text" Value="expression is a holder for a set of subexpressions, in order to take them all as a single unit."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="It also has the following features:"/></expression><expression tag="Typesetting.BulletedList"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="It has scope anchorage, so it is able to hold local symbols (see the"/><expression tag="Internet.UniformResourceLocator" Value="/?tutorial=Symbolic" Description="symbolic tutorial"/><expression tag="String.Text" Value=")."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Its reduction consists in reducing all its subexpressions sequentially, from top to bottom, and then the whole block reduces to that last expression."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Visually, it can be collapsed to a compact form that hides their subexpressions, in order to organize expressions in large programs. It also has a description, that is shown when the block is collapsed."/></expression></expression><expression tag="Typesetting.Centering"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="Math.Number" Value="1"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="Math.Number" Value="2"/></expression><expression tag="String.Text" Value="⋮"/><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="n"/></expression></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The same block, in collapsed state would look like:"/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.Block" Description="Description" Expanded="False"><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="Math.Number" Value="1"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="Math.Number" Value="2"/></expression><expression tag="String.Text" Value="⋮"/><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="n"/></expression></expression><expression tag="Null"/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="As you can see, the"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.Block" Description="Block"/><expression tag="String.Text" Value="expression is a tructure for sequence."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Let us see the following example. Its first expression is a local defiinition of a symbol and its initialization. Since the block has scope anchorage, the variable is visible inside the entire block. Then the second expression is reduced, and finally, the result of such that second expression is the result of the entire block. If you want to collapse the block, select it and then press the &lt;SPACE&gt; key. To switch to its expanded form, press the &lt;SPACE&gt; key again."/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Example of a block expression" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="10"/></expression></expression><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="5"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Math.Number" Value="15"/></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="Selection structures"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Control structures temporarily transfer the control (the &quot;execution&quot; flow) of a program according a condition of sets of conditions."/></expression><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.If" Description="If-Then"/><expression tag="String.Text" Value="expression"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="This expression reduces another expression (the target expression) if a given condition results true, elsewere it does nothing, and the execution flow continues."/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.If"><expression tag="String.Text" Value="condition"/><expression tag="String.Text" Value="target expression"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Notice that there can be one and only one target expression. If you wanted several expressions to be reduced if the condition were true, you can use a block expression as the target expression."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="In the following example, the condition is true, so the target expression is reduced."/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="10"/></expression></expression><expression tag="Programming.If"><expression tag="Math.Arithmetic.IsEven"><expression tag="Symbolic.Symbol" Name="x"/></expression><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="5"/></expression></expression></expression><expression tag="Symbolic.Symbol" Name="x"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Math.Number" Value="15"/></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="In the next one, the condition is not fullfilled, so the target expression is not reduced."/></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="10"/></expression></expression><expression tag="Programming.If"><expression tag="Math.Arithmetic.IsOdd"><expression tag="Symbolic.Symbol" Name="x"/></expression><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="5"/></expression></expression></expression><expression tag="Symbolic.Symbol" Name="x"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Math.Number" Value="10"/></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.InvertedIf" Description="Inverted-If"/><expression tag="String.Text" Value="expression"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.InvertedIf" Description="Inverted-If"/><expression tag="String.Text" Value="expression does exactly the same than the"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.If" Description="If-Then"/><expression tag="String.Text" Value="expression. The difference is visual only. The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.InvertedIf" Description="Inverted-If"/><expression tag="String.Text" Value="looks like:"/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.InvertedIf"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="condition"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.InvertedIf" Description="Inverted-If"/><expression tag="String.Text" Value="expression is generally used when both the expression and condition are simple or small expressions, but it is not mandatory."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Notice that is called &quot;inverted&quot; because the inversion in the order of the condition and the target expression, but the sematics of the entire expression, the condition and the target expression remains the same."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The last two examples can be written using an"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.InvertedIf" Description="Inverted-If"/><expression tag="String.Text" Value="as follows:"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="10"/></expression></expression><expression tag="Programming.InvertedIf"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="5"/></expression></expression><expression tag="Math.Arithmetic.IsEven"><expression tag="Symbolic.Symbol" Name="x"/></expression></expression><expression tag="Symbolic.Symbol" Name="x"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Math.Number" Value="15"/></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="10"/></expression></expression><expression tag="Programming.InvertedIf"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="5"/></expression></expression><expression tag="Math.Arithmetic.IsOdd"><expression tag="Symbolic.Symbol" Name="x"/></expression></expression><expression tag="Symbolic.Symbol" Name="x"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Math.Number" Value="10"/></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Both the"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.If" Description="If-Then"/><expression tag="String.Text" Value="and"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.InvertedIf" Description="Inverted-If"/><expression tag="String.Text" Value="reduce to the result of the reduction of the expression if the condition was true, and the"/><expression tag="Internet.UniformResourceLocator" Value="/reference=Null" Description="Null"/><expression tag="String.Text" Value="expression otherwise:"/></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.If"><expression tag="Logic.True"/><expression tag="Math.Number" Value="5"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Math.Number" Value="5"/></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.If"><expression tag="Logic.False"/><expression tag="Math.Number" Value="5"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Null"/></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.IfElse" Description="If-Then-Else"/><expression tag="String.Text" Value="expression"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.IfElse" Description="If-Then-Else"/><expression tag="String.Text" Value="expression is an extension to the"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.If" Description="If-Then"/><expression tag="String.Text" Value="expression, that adds an expression target to be reduced in case the condition reduces to false. It is visualized as follows:"/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.IfElse"><expression tag="String.Text" Value="condition"/><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="T"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="F"/></expression></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Notice that, depending of the result of the condition, either"/><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="T"/></expression><expression tag="String.Text" Value="or"/><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="F"/></expression><expression tag="String.Text" Value="will be reduced, but never both."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="For our next example, let us create en expression that, if a given number is even, it will increase its value in1, otherwise it will decrease its value in 1:"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="10"/></expression></expression><expression tag="Programming.IfElse"><expression tag="Math.Arithmetic.IsEven"><expression tag="Symbolic.Symbol" Name="x"/></expression><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="1"/></expression></expression><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Negative"><expression tag="Math.Number" Value="1"/></expression></expression></expression></expression><expression tag="Symbolic.Symbol" Name="x"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Math.Number" Value="11"/></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="5"/></expression></expression><expression tag="Programming.IfElse"><expression tag="Math.Arithmetic.IsEven"><expression tag="Symbolic.Symbol" Name="x"/></expression><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="1"/></expression></expression><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Negative"><expression tag="Math.Number" Value="1"/></expression></expression></expression></expression><expression tag="Symbolic.Symbol" Name="x"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Math.Number" Value="4"/></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.Conditional" Description="Conditional"/><expression tag="String.Text" Value="expression"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Just like the"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.InvertedIf" Description="Inverted-If"/><expression tag="String.Text" Value="expression is a shorthand for the"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.If" Description="If-Then"/><expression tag="String.Text" Value="expression, the"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.IfElse" Description="If-Then-Else"/><expression tag="String.Text" Value="expression has also its shorthand: the"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.Conditional" Description="Conditional"/><expression tag="String.Text" Value="expression, and it is visualized as:"/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.Conditional"><expression tag="String.Text" Value="condition"/><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="T"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="F"/></expression></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.Conditional" Description="Conditional"/><expression tag="String.Text" Value="expression is generally used when the conditions and target expressions are simple or small, but it is not mandatory."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="So, the previous example can be written (and it is equivalent) to:"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="10"/></expression></expression><expression tag="Programming.Conditional"><expression tag="Math.Arithmetic.IsEven"><expression tag="Symbolic.Symbol" Name="x"/></expression><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="1"/></expression></expression><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Negative"><expression tag="Math.Number" Value="1"/></expression></expression></expression></expression><expression tag="Symbolic.Symbol" Name="x"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Math.Number" Value="11"/></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="In several programming languages, there exists a distinction between the If-Then-Else and the conditional, the first is an instruction, and the second one is an expression. In Fōrmulæ, everyting is an expression, and hence"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.IfElse" Description="If-Then-Else"/><expression tag="String.Text" Value="and"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.Conditional" Description="Conditional"/><expression tag="String.Text" Value="are really equivalent."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Being expressions, they have a value after reducing. The resulting expression after the reduction of both the"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.IfElse" Description="If-Then-Else"/><expression tag="String.Text" Value="and the"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.Conditional" Description="Conditional"/><expression tag="String.Text" Value="expression is the reduction of the selected target expression (depending of the condition). So the following program is also equivalent to the previous ones:"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="10"/></expression></expression><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Programming.IfElse"><expression tag="Math.Arithmetic.IsEven"><expression tag="Symbolic.Symbol" Name="x"/></expression><expression tag="Math.Number" Value="1"/><expression tag="Math.Arithmetic.Negative"><expression tag="Math.Number" Value="1"/></expression></expression></expression></expression><expression tag="Symbolic.Symbol" Name="x"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Math.Number" Value="11"/></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Or, using a"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.Conditional" Description="Conditional"/><expression tag="String.Text" Value="expression:"/></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="10"/></expression></expression><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Programming.Conditional"><expression tag="Math.Arithmetic.IsEven"><expression tag="Symbolic.Symbol" Name="x"/></expression><expression tag="Math.Number" Value="1"/><expression tag="Math.Arithmetic.Negative"><expression tag="Math.Number" Value="1"/></expression></expression></expression></expression><expression tag="Symbolic.Symbol" Name="x"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Math.Number" Value="11"/></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.ConditionalSwitch" Description="Conditional Switch"/><expression tag="String.Text" Value="expression"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Sometimes, you have to fullfill more than two conditions, witht their respective target expressions."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The next solution will work, but it is not very clear:"/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.IfElse"><expression tag="Expression.Child"><expression tag="String.Text" Value="condition"/><expression tag="String.Text" Value="1"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="1"/></expression><expression tag="Programming.IfElse"><expression tag="Expression.Child"><expression tag="String.Text" Value="condition"/><expression tag="String.Text" Value="2"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="2"/></expression><expression tag="Programming.If"><expression tag="Expression.Child"><expression tag="String.Text" Value="condition"/><expression tag="String.Text" Value="n"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="n"/></expression></expression></expression></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.ConditionalSwitch" Description="Conditional Switch"/><expression tag="String.Text" Value="can hold two or more subexpressions. They are (in pairs) every one of the branches. You can insert/delete subexpression like any other expression (i.e. lists), by the use of the &lt;INSERT&gt; and &lt;DELETE&gt; keys."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The first form of this expression is when it contains an even number of subexpressions. It is visualized as the following:"/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.ConditionalSwitch"><expression tag="Expression.Child"><expression tag="String.Text" Value="condition"/><expression tag="String.Text" Value="1"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="1"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="condition"/><expression tag="String.Text" Value="2"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="2"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="condition"/><expression tag="String.Text" Value="n"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="n"/></expression></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="If any of the given conditions is fullfilled the correspondent target expression is reduced and the entire"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.ConditionalSwitch" Description="Conditional Switch"/><expression tag="String.Text" Value="reduces to it. If none of the given conditions was fullfilled the entire"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.ConditionalSwitch" Description="Conditional Switch"/><expression tag="String.Text" Value="reduces to the"/><expression tag="Internet.UniformResourceLocator" Value="/reference=Null" Description="Null"/><expression tag="String.Text" Value="expression."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="If the number of subexpressions is odd, the last one is a &quot;default&quot; target expression, thta will be reduced in case thet all the previous conditions did not fullfill. It looks as follows:"/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.ConditionalSwitch"><expression tag="Expression.Child"><expression tag="String.Text" Value="condition"/><expression tag="String.Text" Value="1"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="1"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="condition"/><expression tag="String.Text" Value="2"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="2"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="condition"/><expression tag="String.Text" Value="n"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="n"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="D"/></expression></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="And it is equivalent to (and clearer than):"/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.IfElse"><expression tag="Expression.Child"><expression tag="String.Text" Value="condition"/><expression tag="String.Text" Value="1"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="1"/></expression><expression tag="Programming.IfElse"><expression tag="Expression.Child"><expression tag="String.Text" Value="condition"/><expression tag="String.Text" Value="2"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="2"/></expression><expression tag="Programming.IfElse"><expression tag="Expression.Child"><expression tag="String.Text" Value="condition"/><expression tag="String.Text" Value="n"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="n"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="D"/></expression></expression></expression></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="If any of the given conditions is fullfilled the correspondent target expression is reduced and the entire"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.ConditionalSwitch" Description="Conditional Switch"/><expression tag="String.Text" Value="reduces to it. If none of the given conditions was fullfilled the default expression is reduced and the entire"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.ConditionalSwitch" Description="Conditional Switch"/><expression tag="String.Text" Value="reduces to it."/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="polynomial name"/><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="terms"/></expression></expression><expression tag="Programming.ConditionalSwitch"><expression tag="Relation.Equals"><expression tag="Symbolic.Symbol" Name="terms"/><expression tag="Math.Number" Value="1"/></expression><expression tag="String.String" Value="monomial"/><expression tag="Relation.Equals"><expression tag="Symbolic.Symbol" Name="terms"/><expression tag="Math.Number" Value="2"/></expression><expression tag="String.String" Value="binomial"/><expression tag="Relation.Equals"><expression tag="Symbolic.Symbol" Name="terms"/><expression tag="Math.Number" Value="3"/></expression><expression tag="String.String" Value="trinomial"/><expression tag="String.String" Value="polynomial"/></expression></expression></expression><expression tag="List.CreateTable"><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="t"/><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="polynomial name"/><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="t"/></expression></expression></expression><expression tag="Symbolic.Symbol" Name="t"/><expression tag="Math.Number" Value="1"/><expression tag="Math.Number" Value="5"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.Table"><expression tag="List.List"><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="t"/><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="polynomial name"/><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="t"/></expression></expression></expression><expression tag="List.List"><expression tag="Math.Number" Value="1"/><expression tag="String.String" Value="monomial"/></expression><expression tag="List.List"><expression tag="Math.Number" Value="2"/><expression tag="String.String" Value="binomial"/></expression><expression tag="List.List"><expression tag="Math.Number" Value="3"/><expression tag="String.String" Value="trinomial"/></expression><expression tag="List.List"><expression tag="Math.Number" Value="4"/><expression tag="String.String" Value="polynomial"/></expression><expression tag="List.List"><expression tag="Math.Number" Value="5"/><expression tag="String.String" Value="polynomial"/></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.ComparativeSwitch" Description="Comparative Switch"/><expression tag="String.Text" Value="expression"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="There are cases (like the previous example) where conditions are related to test a single expression against a set of values. In such a case, there exist a &quot;shortcut&quot; of a"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.ConditionalSwitch" Description="Conditional Switch"/><expression tag="String.Text" Value="it is called"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.ComparativeSwitch" Description="Comparative Switch"/><expression tag="String.Text" Value="It has the followng form (when contains an odd number of subexpressions):"/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.ComparativeSwitch"><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="T"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="value-or-list-of-values"/><expression tag="String.Text" Value="1"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="1"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="value-or-list-of-values"/><expression tag="String.Text" Value="2"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="2"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="value-or-list-of-values"/><expression tag="String.Text" Value="n"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="n"/></expression></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="And the following is when it contains an even number of subexpressions:"/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.ComparativeSwitch"><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="T"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="value-or-list-of-values"/><expression tag="String.Text" Value="1"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="1"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="value-or-list-of-values"/><expression tag="String.Text" Value="2"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="2"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="value-or-list-of-values"/><expression tag="String.Text" Value="n"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="n"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="D"/></expression></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="polynomial name"/><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="terms"/></expression></expression><expression tag="Programming.ComparativeSwitch"><expression tag="Symbolic.Symbol" Name="terms"/><expression tag="Math.Number" Value="1"/><expression tag="String.String" Value="monomial"/><expression tag="Math.Number" Value="2"/><expression tag="String.String" Value="binomial"/><expression tag="Math.Number" Value="3"/><expression tag="String.String" Value="trinomial"/><expression tag="String.String" Value="polynomial"/></expression></expression></expression><expression tag="List.CreateTable"><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="t"/><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="polynomial name"/><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="t"/></expression></expression></expression><expression tag="Symbolic.Symbol" Name="t"/><expression tag="Math.Number" Value="1"/><expression tag="Math.Number" Value="5"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.Table"><expression tag="List.List"><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="t"/><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="polynomial name"/><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="t"/></expression></expression></expression><expression tag="List.List"><expression tag="Math.Number" Value="1"/><expression tag="String.String" Value="monomial"/></expression><expression tag="List.List"><expression tag="Math.Number" Value="2"/><expression tag="String.String" Value="binomial"/></expression><expression tag="List.List"><expression tag="Math.Number" Value="3"/><expression tag="String.String" Value="trinomial"/></expression><expression tag="List.List"><expression tag="Math.Number" Value="4"/><expression tag="String.String" Value="polynomial"/></expression><expression tag="List.List"><expression tag="Math.Number" Value="5"/><expression tag="String.String" Value="polynomial"/></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="As the specificatios says, you can check agains a single value, or a list of values:"/></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="quarter"/><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="date"/></expression></expression><expression tag="Programming.ComparativeSwitch"><expression tag="Time.Gregorian.GetMonth"><expression tag="Symbolic.Symbol" Name="date"/></expression><expression tag="List.List"><expression tag="Time.Gregorian.Month.January"/><expression tag="Time.Gregorian.Month.February"/><expression tag="Time.Gregorian.Month.March"/></expression><expression tag="String.String" Value="Q1"/><expression tag="List.List"><expression tag="Time.Gregorian.Month.April"/><expression tag="Time.Gregorian.Month.May"/><expression tag="Time.Gregorian.Month.June"/></expression><expression tag="String.String" Value="Q2"/><expression tag="List.List"><expression tag="Time.Gregorian.Month.July"/><expression tag="Time.Gregorian.Month.August"/><expression tag="Time.Gregorian.Month.September"/></expression><expression tag="String.String" Value="Q3"/><expression tag="List.List"><expression tag="Time.Gregorian.Month.October"/><expression tag="Time.Gregorian.Month.November"/><expression tag="Time.Gregorian.Month.December"/></expression><expression tag="String.String" Value="Q4"/></expression></expression></expression><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="quarter"/><expression tag="List.List"><expression tag="Time.Time" Value="1271314800000"/></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="String.String" Value="Q2"/></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="Iteration structures"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Expressions for repetition allow that one expression be repeated several times, according to a given criteria. There are several repetition expressions in Fōrmulæ."/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.ForTimes" Description="For Times"/><expression tag="String.Text" Value="expression"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="This expression iterates over a fixed number of times."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="It has the form:"/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.ForTimes"><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="T"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="N"/></expression></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="list"/><expression tag="List.List"/></expression></expression><expression tag="Programming.ForTimes"><expression tag="Expression.Append"><expression tag="Symbolic.Symbol" Name="list"/><expression tag="Math.Number" Value="5"/></expression><expression tag="Math.Number" Value="10"/></expression><expression tag="Symbolic.Symbol" Name="list"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="Math.Number" Value="5"/><expression tag="Math.Number" Value="5"/><expression tag="Math.Number" Value="5"/><expression tag="Math.Number" Value="5"/><expression tag="Math.Number" Value="5"/><expression tag="Math.Number" Value="5"/><expression tag="Math.Number" Value="5"/><expression tag="Math.Number" Value="5"/><expression tag="Math.Number" Value="5"/><expression tag="Math.Number" Value="5"/></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.ForFromTo" Description="For From To"/><expression tag="String.Text" Value="expression"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="This expression iterates from an initial to a final values. Iteration includes both numbers."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="It has the form:"/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.ForFromTo"><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="T"/></expression><expression tag="Symbolic.Symbol" Name="symbol"/><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="start"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="end"/></expression></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="list"/><expression tag="List.List"/></expression></expression><expression tag="Programming.ForFromTo"><expression tag="Expression.Append"><expression tag="Symbolic.Symbol" Name="list"/><expression tag="Symbolic.Symbol" Name="i"/></expression><expression tag="Symbolic.Symbol" Name="i"/><expression tag="Math.Number" Value="1"/><expression tag="Math.Number" Value="10"/></expression><expression tag="Symbolic.Symbol" Name="list"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="Math.Number" Value="1"/><expression tag="Math.Number" Value="2"/><expression tag="Math.Number" Value="3"/><expression tag="Math.Number" Value="4"/><expression tag="Math.Number" Value="5"/><expression tag="Math.Number" Value="6"/><expression tag="Math.Number" Value="7"/><expression tag="Math.Number" Value="8"/><expression tag="Math.Number" Value="9"/><expression tag="Math.Number" Value="10"/></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The following example is for creating a list with prime numbers between 1 and 100."/></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="primes"/><expression tag="List.List"/></expression></expression><expression tag="Programming.ForFromTo"><expression tag="Programming.InvertedIf"><expression tag="Expression.Append"><expression tag="Symbolic.Symbol" Name="primes"/><expression tag="Symbolic.Symbol" Name="n"/></expression><expression tag="Math.Arithmetic.IsPrime"><expression tag="Symbolic.Symbol" Name="n"/></expression></expression><expression tag="Symbolic.Symbol" Name="n"/><expression tag="Math.Number" Value="1"/><expression tag="Math.Number" Value="100"/></expression><expression tag="Symbolic.Symbol" Name="primes"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="Math.Number" Value="2"/><expression tag="Math.Number" Value="3"/><expression tag="Math.Number" Value="5"/><expression tag="Math.Number" Value="7"/><expression tag="Math.Number" Value="11"/><expression tag="Math.Number" Value="13"/><expression tag="Math.Number" Value="17"/><expression tag="Math.Number" Value="19"/><expression tag="Math.Number" Value="23"/><expression tag="Math.Number" Value="29"/><expression tag="Math.Number" Value="31"/><expression tag="Math.Number" Value="37"/><expression tag="Math.Number" Value="41"/><expression tag="Math.Number" Value="43"/><expression tag="Math.Number" Value="47"/><expression tag="Math.Number" Value="53"/><expression tag="Math.Number" Value="59"/><expression tag="Math.Number" Value="61"/><expression tag="Math.Number" Value="67"/><expression tag="Math.Number" Value="71"/><expression tag="Math.Number" Value="73"/><expression tag="Math.Number" Value="79"/><expression tag="Math.Number" Value="83"/><expression tag="Math.Number" Value="89"/><expression tag="Math.Number" Value="97"/></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="You can an additional argument to include the number to be added in every iteration. By default is 1. It can be an integer, decimal, fractional or negative number."/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.ForFromTo"><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="T"/></expression><expression tag="Symbolic.Symbol" Name="symbol"/><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="start"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="end"/></expression><expression tag="Expression.Child"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="step"/></expression></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="list"/><expression tag="List.List"/></expression></expression><expression tag="Programming.ForFromTo"><expression tag="Expression.Append"><expression tag="Symbolic.Symbol" Name="list"/><expression tag="Symbolic.Symbol" Name="i"/></expression><expression tag="Symbolic.Symbol" Name="i"/><expression tag="Math.Number" Value="10"/><expression tag="Math.Number" Value="1"/><expression tag="Math.Arithmetic.Negative"><expression tag="Math.Number" Value="1"/></expression></expression><expression tag="Symbolic.Symbol" Name="list"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="Math.Number" Value="10"/><expression tag="Math.Number" Value="9"/><expression tag="Math.Number" Value="8"/><expression tag="Math.Number" Value="7"/><expression tag="Math.Number" Value="6"/><expression tag="Math.Number" Value="5"/><expression tag="Math.Number" Value="4"/><expression tag="Math.Number" Value="3"/><expression tag="Math.Number" Value="2"/><expression tag="Math.Number" Value="1"/></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="list"/><expression tag="List.List"/></expression></expression><expression tag="Programming.ForFromTo"><expression tag="Expression.Append"><expression tag="Symbolic.Symbol" Name="list"/><expression tag="Symbolic.Symbol" Name="i"/></expression><expression tag="Symbolic.Symbol" Name="i"/><expression tag="Math.Number" Value="0"/><expression tag="Math.Number" Value="1"/><expression tag="Math.Number" Value="0.1"/></expression><expression tag="Symbolic.Symbol" Name="list"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="Math.Number" Value="0"/><expression tag="Math.Number" Value="0.1"/><expression tag="Math.Number" Value="0.2"/><expression tag="Math.Number" Value="0.3"/><expression tag="Math.Number" Value="0.4"/><expression tag="Math.Number" Value="0.5"/><expression tag="Math.Number" Value="0.6"/><expression tag="Math.Number" Value="0.7"/><expression tag="Math.Number" Value="0.8"/><expression tag="Math.Number" Value="0.9"/><expression tag="Math.Number" Value="1."/></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="list"/><expression tag="List.List"/></expression></expression><expression tag="Programming.ForFromTo"><expression tag="Expression.Append"><expression tag="Symbolic.Symbol" Name="list"/><expression tag="Symbolic.Symbol" Name="i"/></expression><expression tag="Symbolic.Symbol" Name="i"/><expression tag="Math.Number" Value="0"/><expression tag="Math.Number" Value="10"/><expression tag="Math.Arithmetic.Division"><expression tag="Math.Number" Value="2"/><expression tag="Math.Number" Value="3"/></expression></expression><expression tag="Symbolic.Symbol" Name="list"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="Math.Number" Value="0"/><expression tag="Math.Arithmetic.Division"><expression tag="Math.Number" Value="2"/><expression tag="Math.Number" Value="3"/></expression><expression tag="Math.Arithmetic.Division"><expression tag="Math.Number" Value="4"/><expression tag="Math.Number" Value="3"/></expression><expression tag="Math.Number" Value="2"/><expression tag="Math.Arithmetic.Division"><expression tag="Math.Number" Value="8"/><expression tag="Math.Number" Value="3"/></expression><expression tag="Math.Arithmetic.Division"><expression tag="Math.Number" Value="10"/><expression tag="Math.Number" Value="3"/></expression><expression tag="Math.Number" Value="4"/><expression tag="Math.Arithmetic.Division"><expression tag="Math.Number" Value="14"/><expression tag="Math.Number" Value="3"/></expression><expression tag="Math.Arithmetic.Division"><expression tag="Math.Number" Value="16"/><expression tag="Math.Number" Value="3"/></expression><expression tag="Math.Number" Value="6"/><expression tag="Math.Arithmetic.Division"><expression tag="Math.Number" Value="20"/><expression tag="Math.Number" Value="3"/></expression><expression tag="Math.Arithmetic.Division"><expression tag="Math.Number" Value="22"/><expression tag="Math.Number" Value="3"/></expression><expression tag="Math.Number" Value="8"/><expression tag="Math.Arithmetic.Division"><expression tag="Math.Number" Value="26"/><expression tag="Math.Number" Value="3"/></expression><expression tag="Math.Arithmetic.Division"><expression tag="Math.Number" Value="28"/><expression tag="Math.Number" Value="3"/></expression><expression tag="Math.Number" Value="10"/></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.ForIn" Description="For In"/><expression tag="String.Text" Value="expression"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="This expression iterates over the elements of a given list."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="It has the form:"/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.ForIn"><expression tag="String.Text" Value="expression"/><expression tag="Symbolic.Symbol" Name="symbol"/><expression tag="String.Text" Value="list"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Example. We want to write a function that, given a list, calculates the sum of the squares of the elements of the list:"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="sum of squares"/><expression tag="List.List"><expression tag="Symbolic.Symbol" Name="list"/></expression></expression><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="sum"/><expression tag="Math.Number" Value="0"/></expression></expression><expression tag="Programming.ForIn"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="sum"/><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="sum"/><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="element"/><expression tag="Math.Number" Value="2"/></expression></expression></expression><expression tag="Symbolic.Symbol" Name="element"/><expression tag="Symbolic.Symbol" Name="list"/></expression><expression tag="Symbolic.Symbol" Name="sum"/></expression></expression></expression><expression tag="Symbolic.Function"><expression tag="Symbolic.Symbol" Name="sum of squares"/><expression tag="List.List"><expression tag="List.List"><expression tag="Math.Number" Value="4"/><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Arithmetic.Division"><expression tag="Math.Number" Value="1"/><expression tag="Math.Number" Value="2"/></expression></expression></expression></expression></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="Math.Arithmetic.Addition"><expression tag="Math.Arithmetic.Division"><expression tag="Math.Number" Value="65"/><expression tag="Math.Number" Value="4"/></expression><expression tag="Math.Arithmetic.Exponentiation"><expression tag="Symbolic.Symbol" Name="x"/><expression tag="Math.Number" Value="2"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.While" Description="While"/><expression tag="String.Text" Value="expression"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="This expression iterates WHILE a given condition is fulfilled. Once it is not, the iteration terminates."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Notice that, since the condition is checked before the expression, it is possible the number of iterations to be zero and the body is never executed."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="It has the form:"/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.While"><expression tag="String.Text" Value="condition"/><expression tag="String.Text" Value="expression"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The next excercise is about listing prime numbers too, with a difference. We want to get the list of the first 20 primer numbers, whatever they are."/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="primes"/><expression tag="List.List"/></expression></expression><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="n"/><expression tag="Math.Number" Value="1"/></expression></expression><expression tag="Programming.While"><expression tag="Relation.Less"><expression tag="Expression.Cardinality"><expression tag="Symbolic.Symbol" Name="primes"/></expression><expression tag="Math.Number" Value="20"/></expression><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Programming.InvertedIf"><expression tag="Expression.Append"><expression tag="Symbolic.Symbol" Name="primes"/><expression tag="Symbolic.Symbol" Name="n"/></expression><expression tag="Math.Arithmetic.IsPrime"><expression tag="Symbolic.Symbol" Name="n"/></expression></expression><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="n"/><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="n"/><expression tag="Math.Number" Value="1"/></expression></expression></expression></expression><expression tag="Symbolic.Symbol" Name="primes"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="Math.Number" Value="2"/><expression tag="Math.Number" Value="3"/><expression tag="Math.Number" Value="5"/><expression tag="Math.Number" Value="7"/><expression tag="Math.Number" Value="11"/><expression tag="Math.Number" Value="13"/><expression tag="Math.Number" Value="17"/><expression tag="Math.Number" Value="19"/><expression tag="Math.Number" Value="23"/><expression tag="Math.Number" Value="29"/><expression tag="Math.Number" Value="31"/><expression tag="Math.Number" Value="37"/><expression tag="Math.Number" Value="41"/><expression tag="Math.Number" Value="43"/><expression tag="Math.Number" Value="47"/><expression tag="Math.Number" Value="53"/><expression tag="Math.Number" Value="59"/><expression tag="Math.Number" Value="61"/><expression tag="Math.Number" Value="67"/><expression tag="Math.Number" Value="71"/></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Paragraph"><expression tag="Typesetting.BoldChunk"><expression tag="String.Text" Value="The"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.Until" Description="Until"/><expression tag="String.Text" Value="expression"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="This expression iterates UNTIL a given condition is fulfilled. Once it is not, the iteration terminates."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Notice that, since the condition is checked after the expression, the number of iterations is at least one, the body is at least once execute."/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="It has the form:"/></expression><expression tag="Typesetting.Centering"><expression tag="Programming.Until"><expression tag="String.Text" Value="expression"/><expression tag="String.Text" Value="condition"/></expression></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="The next does the same than the previous example, this time using a"/><expression tag="Internet.UniformResourceLocator" Value="/?reference=Programming.Until" Description="Until"/><expression tag="String.Text" Value="expression:"/></expression></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="primes"/><expression tag="List.List"/></expression></expression><expression tag="Symbolic.Local"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="n"/><expression tag="Math.Number" Value="0"/></expression></expression><expression tag="Programming.Until"><expression tag="Programming.Block" Description="Description" Expanded="True"><expression tag="Symbolic.Assignment"><expression tag="Symbolic.Symbol" Name="n"/><expression tag="Math.Arithmetic.Addition"><expression tag="Symbolic.Symbol" Name="n"/><expression tag="Math.Number" Value="1"/></expression></expression><expression tag="Programming.InvertedIf"><expression tag="Expression.Append"><expression tag="Symbolic.Symbol" Name="primes"/><expression tag="Symbolic.Symbol" Name="n"/></expression><expression tag="Math.Arithmetic.IsPrime"><expression tag="Symbolic.Symbol" Name="n"/></expression></expression></expression><expression tag="Relation.Equals"><expression tag="Expression.Cardinality"><expression tag="Symbolic.Symbol" Name="primes"/></expression><expression tag="Math.Number" Value="20"/></expression></expression><expression tag="Symbolic.Symbol" Name="primes"/></expression></expression><expression tag="Formulae.Script.Row" type="1"><expression tag="List.List"><expression tag="Math.Number" Value="2"/><expression tag="Math.Number" Value="3"/><expression tag="Math.Number" Value="5"/><expression tag="Math.Number" Value="7"/><expression tag="Math.Number" Value="11"/><expression tag="Math.Number" Value="13"/><expression tag="Math.Number" Value="17"/><expression tag="Math.Number" Value="19"/><expression tag="Math.Number" Value="23"/><expression tag="Math.Number" Value="29"/><expression tag="Math.Number" Value="31"/><expression tag="Math.Number" Value="37"/><expression tag="Math.Number" Value="41"/><expression tag="Math.Number" Value="43"/><expression tag="Math.Number" Value="47"/><expression tag="Math.Number" Value="53"/><expression tag="Math.Number" Value="59"/><expression tag="Math.Number" Value="61"/><expression tag="Math.Number" Value="67"/><expression tag="Math.Number" Value="71"/></expression></expression><expression tag="Formulae.Script.Row" type="0"><expression tag="Typesetting.MultiParagraph"><expression tag="Typesetting.Rule"/><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Author: Laurence R. Ugalde"/></expression><expression tag="Typesetting.Paragraph"><expression tag="String.Text" Value="Created: April 12, 2021. Last modified:"/><expression tag="Time.Time" Value="1627013820000"/></expression></expression></expression></expression>