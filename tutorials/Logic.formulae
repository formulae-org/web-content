<expression tag="Formulae.Script" Modules="org.formulae.typesetting,org.formulae.text.string,org.formulae.logic,org.formulae.list,org.formulae.visualization,org.formulae.symbolic,org.formulae.math.arithmetic,org.formulae.time">
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Logic tutorial"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="In this tutorial, you will learn expressions for logical values and operations."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Logic values"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="There are two logic values, or literals:"/>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="The"/>
					<expression tag="Internet.UniformResourceLocator" Value="/?script=reference/Logic.True" Description="True"/>
					<expression tag="String.Text" Value="expression, that represents"/>
					<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Logical_truth" Description="truth"/>
					<expression tag="String.Text" Value=", and it is shown as"/>
					<expression tag="Logic.True"/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="The"/>
					<expression tag="Internet.UniformResourceLocator" Value="/?script=reference/Logic.False" Description="False"/>
					<expression tag="String.Text" Value="expression, that represents"/>
					<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/False_(logic)" Description="falsity"/>
					<expression tag="String.Text" Value=", and it is shown as"/>
					<expression tag="Logic.False"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Logical operations"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The following operations can be performed with logic values:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="List.Table">
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Logical operation"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Example"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Number of operands"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Negation" Description="Negation (NOT)"/>
							<expression tag="Logic.Negation">
								<expression tag="Symbolic.Symbol" Name="P"/>
							</expression>
							<expression tag="String.Text" Value="1"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Logical_conjunction" Description="Conjunction (AND)"/>
							<expression tag="Logic.Conjunction">
								<expression tag="Symbolic.Symbol" Name="P"/>
								<expression tag="Symbolic.Symbol" Name="Q"/>
							</expression>
							<expression tag="String.Text" Value="2 or more"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Logical_disjunction" Description="Disjunction (OR)"/>
							<expression tag="Logic.Disjunction">
								<expression tag="Symbolic.Symbol" Name="P"/>
								<expression tag="Symbolic.Symbol" Name="Q"/>
							</expression>
							<expression tag="String.Text" Value="2 or more"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Material_conditional" Description="Conditional"/>
							<expression tag="Logic.Implication">
								<expression tag="Symbolic.Symbol" Name="P"/>
								<expression tag="Symbolic.Symbol" Name="Q"/>
							</expression>
							<expression tag="String.Text" Value="2"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Logical_biconditional" Description="Biconditional"/>
							<expression tag="Logic.Equivalence">
								<expression tag="Symbolic.Symbol" Name="P"/>
								<expression tag="Symbolic.Symbol" Name="Q"/>
							</expression>
							<expression tag="String.Text" Value="2 or more"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Exclusive_or" Description="Exclusive disjunction (XOR)"/>
							<expression tag="Logic.ExclusiveDisjunction">
								<expression tag="Symbolic.Symbol" Name="P"/>
								<expression tag="Symbolic.Symbol" Name="Q"/>
							</expression>
							<expression tag="String.Text" Value="2 or more"/>
						</expression>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The formal name of the conditional is &quot;material conditional&quot;, and it is also known as &quot;material implication&quot;."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The formal name of the biconditional is &quot;material biconditional&quot;, and it is also known as &quot;equivalence&quot;."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The following is a table showing the results of the logical operations. In logic, this type of table is known as"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Truth_table" Description="truth table."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="List.CreateTable">
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="P"/>
				<expression tag="Symbolic.Symbol" Name="Q"/>
				<expression tag="Logic.Negation">
					<expression tag="Symbolic.Symbol" Name="P"/>
				</expression>
				<expression tag="Logic.Negation">
					<expression tag="Symbolic.Symbol" Name="Q"/>
				</expression>
				<expression tag="Logic.Conjunction">
					<expression tag="Symbolic.Symbol" Name="P"/>
					<expression tag="Symbolic.Symbol" Name="Q"/>
				</expression>
				<expression tag="Logic.Disjunction">
					<expression tag="Symbolic.Symbol" Name="P"/>
					<expression tag="Symbolic.Symbol" Name="Q"/>
				</expression>
				<expression tag="Logic.Implication">
					<expression tag="Symbolic.Symbol" Name="P"/>
					<expression tag="Symbolic.Symbol" Name="Q"/>
				</expression>
				<expression tag="Logic.Equivalence">
					<expression tag="Symbolic.Symbol" Name="P"/>
					<expression tag="Symbolic.Symbol" Name="Q"/>
				</expression>
				<expression tag="Logic.ExclusiveDisjunction">
					<expression tag="Symbolic.Symbol" Name="P"/>
					<expression tag="Symbolic.Symbol" Name="Q"/>
				</expression>
			</expression>
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="P"/>
				<expression tag="Symbolic.Symbol" Name="Q"/>
			</expression>
			<expression tag="List.CartesianExponentiation">
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
				</expression>
				<expression tag="Math.Number" Value="2"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.Table">
			<expression tag="List.List">
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="P"/>
					<expression tag="Symbolic.Symbol" Name="Q"/>
					<expression tag="Logic.Negation">
						<expression tag="Symbolic.Symbol" Name="P"/>
					</expression>
					<expression tag="Logic.Negation">
						<expression tag="Symbolic.Symbol" Name="Q"/>
					</expression>
					<expression tag="Logic.Conjunction">
						<expression tag="Symbolic.Symbol" Name="P"/>
						<expression tag="Symbolic.Symbol" Name="Q"/>
					</expression>
					<expression tag="Logic.Disjunction">
						<expression tag="Symbolic.Symbol" Name="P"/>
						<expression tag="Symbolic.Symbol" Name="Q"/>
					</expression>
					<expression tag="Logic.Implication">
						<expression tag="Symbolic.Symbol" Name="P"/>
						<expression tag="Symbolic.Symbol" Name="Q"/>
					</expression>
					<expression tag="Logic.Equivalence">
						<expression tag="Symbolic.Symbol" Name="P"/>
						<expression tag="Symbolic.Symbol" Name="Q"/>
					</expression>
					<expression tag="Logic.ExclusiveDisjunction">
						<expression tag="Symbolic.Symbol" Name="P"/>
						<expression tag="Symbolic.Symbol" Name="Q"/>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="String.Text" Value="Truth tables are commonly used to retrieve the result of more complex logical operations, or to prove (or disprove) logical identities."/>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="For example, the following proves that conditional is not commutative, that is,"/>
				<expression tag="Logic.Implication">
					<expression tag="Symbolic.Symbol" Name="P"/>
					<expression tag="Symbolic.Symbol" Name="Q"/>
				</expression>
				<expression tag="String.Text" Value="is not the same that"/>
				<expression tag="Logic.Implication">
					<expression tag="Symbolic.Symbol" Name="Q"/>
					<expression tag="Symbolic.Symbol" Name="P"/>
				</expression>
				<expression tag="String.Text" Value=":"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="List.CreateTable">
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="P"/>
				<expression tag="Symbolic.Symbol" Name="Q"/>
				<expression tag="Logic.Implication">
					<expression tag="Symbolic.Symbol" Name="P"/>
					<expression tag="Symbolic.Symbol" Name="Q"/>
				</expression>
				<expression tag="Logic.Implication">
					<expression tag="Symbolic.Symbol" Name="Q"/>
					<expression tag="Symbolic.Symbol" Name="P"/>
				</expression>
			</expression>
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="P"/>
				<expression tag="Symbolic.Symbol" Name="Q"/>
			</expression>
			<expression tag="List.CartesianExponentiation">
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
				</expression>
				<expression tag="Math.Number" Value="2"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.Table">
			<expression tag="List.List">
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="P"/>
					<expression tag="Symbolic.Symbol" Name="Q"/>
					<expression tag="Logic.Implication">
						<expression tag="Symbolic.Symbol" Name="P"/>
						<expression tag="Symbolic.Symbol" Name="Q"/>
					</expression>
					<expression tag="Logic.Implication">
						<expression tag="Symbolic.Symbol" Name="Q"/>
						<expression tag="Symbolic.Symbol" Name="P"/>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Paragraph">
			<expression tag="String.Text" Value="This proves that conditional is not associative:"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="List.CreateTable">
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="P"/>
				<expression tag="Symbolic.Symbol" Name="Q"/>
				<expression tag="Symbolic.Symbol" Name="R"/>
				<expression tag="Logic.Implication">
					<expression tag="Logic.Implication">
						<expression tag="Symbolic.Symbol" Name="P"/>
						<expression tag="Symbolic.Symbol" Name="Q"/>
					</expression>
					<expression tag="Symbolic.Symbol" Name="R"/>
				</expression>
				<expression tag="Logic.Implication">
					<expression tag="Symbolic.Symbol" Name="P"/>
					<expression tag="Logic.Implication">
						<expression tag="Symbolic.Symbol" Name="Q"/>
						<expression tag="Symbolic.Symbol" Name="R"/>
					</expression>
				</expression>
			</expression>
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="P"/>
				<expression tag="Symbolic.Symbol" Name="Q"/>
				<expression tag="Symbolic.Symbol" Name="R"/>
			</expression>
			<expression tag="List.CartesianExponentiation">
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
				</expression>
				<expression tag="Math.Number" Value="3"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.Table">
			<expression tag="List.List">
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="P"/>
					<expression tag="Symbolic.Symbol" Name="Q"/>
					<expression tag="Symbolic.Symbol" Name="R"/>
					<expression tag="Logic.Implication">
						<expression tag="Logic.Implication">
							<expression tag="Symbolic.Symbol" Name="P"/>
							<expression tag="Symbolic.Symbol" Name="Q"/>
						</expression>
						<expression tag="Symbolic.Symbol" Name="R"/>
					</expression>
					<expression tag="Logic.Implication">
						<expression tag="Symbolic.Symbol" Name="P"/>
						<expression tag="Logic.Implication">
							<expression tag="Symbolic.Symbol" Name="Q"/>
							<expression tag="Symbolic.Symbol" Name="R"/>
						</expression>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Tautologies"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="A"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Tautology_(logic)" Description="tautology"/>
				<expression tag="String.Text" Value="is a logical expression or assertion that is true in every possible interpretation."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="For example, to prove that conjunction is commutative, that is,"/>
				<expression tag="Logic.Conjunction">
					<expression tag="Symbolic.Symbol" Name="P"/>
					<expression tag="Symbolic.Symbol" Name="Q"/>
				</expression>
				<expression tag="String.Text" Value="produces the same values that"/>
				<expression tag="Logic.Conjunction">
					<expression tag="Symbolic.Symbol" Name="Q"/>
					<expression tag="Symbolic.Symbol" Name="P"/>
				</expression>
				<expression tag="String.Text" Value=":"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="List.CreateTable">
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="P"/>
				<expression tag="Symbolic.Symbol" Name="Q"/>
				<expression tag="Logic.Equivalence">
					<expression tag="Logic.Conjunction">
						<expression tag="Symbolic.Symbol" Name="P"/>
						<expression tag="Symbolic.Symbol" Name="Q"/>
					</expression>
					<expression tag="Logic.Conjunction">
						<expression tag="Symbolic.Symbol" Name="Q"/>
						<expression tag="Symbolic.Symbol" Name="P"/>
					</expression>
				</expression>
			</expression>
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="P"/>
				<expression tag="Symbolic.Symbol" Name="Q"/>
			</expression>
			<expression tag="List.CartesianExponentiation">
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
				</expression>
				<expression tag="Math.Number" Value="2"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.Table">
			<expression tag="List.List">
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="P"/>
					<expression tag="Symbolic.Symbol" Name="Q"/>
					<expression tag="Logic.Equivalence">
						<expression tag="Logic.Conjunction">
							<expression tag="Symbolic.Symbol" Name="P"/>
							<expression tag="Symbolic.Symbol" Name="Q"/>
						</expression>
						<expression tag="Logic.Conjunction">
							<expression tag="Symbolic.Symbol" Name="Q"/>
							<expression tag="Symbolic.Symbol" Name="P"/>
						</expression>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Short-circuit evaluation"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="In the disjunction operation, if any of the operands is"/>
				<expression tag="Logic.True"/>
				<expression tag="String.Text" Value="makes the entire operation"/>
				<expression tag="Logic.True"/>
				<expression tag="String.Text" Value=":"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="List.CreateTable">
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="P"/>
				<expression tag="Logic.Disjunction">
					<expression tag="Logic.True"/>
					<expression tag="Symbolic.Symbol" Name="P"/>
				</expression>
			</expression>
			<expression tag="Symbolic.Symbol" Name="P"/>
			<expression tag="List.List">
				<expression tag="Logic.True"/>
				<expression tag="Logic.False"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.Table">
			<expression tag="List.List">
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="P"/>
					<expression tag="Logic.Disjunction">
						<expression tag="Logic.True"/>
						<expression tag="Symbolic.Symbol" Name="P"/>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.True"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.False"/>
					<expression tag="Logic.True"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Therefore, if an operand is detected to be"/>
				<expression tag="Logic.True"/>
				<expression tag="String.Text" Value=", it makes no sense to evaluate the other operand (or operands), because we know that the entire result will be"/>
				<expression tag="Logic.True"/>
				<expression tag="String.Text" Value=". This is called"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Short-circuit_evaluation" Description="short-circuit evaluation."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Conversely, In the conjunction operation, if any of the operands is"/>
				<expression tag="Logic.False"/>
				<expression tag="String.Text" Value="makes the entire operation"/>
				<expression tag="Logic.False"/>
				<expression tag="String.Text" Value=". Therefore, if an operand is detected to be"/>
				<expression tag="Logic.False"/>
				<expression tag="String.Text" Value=", it makes no sense to evaluate the other operand (or operands), because we know that the entire result will be"/>
				<expression tag="Logic.False"/>
				<expression tag="String.Text" Value="."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="List.CreateTable">
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="P"/>
				<expression tag="Logic.Conjunction">
					<expression tag="Logic.False"/>
					<expression tag="Symbolic.Symbol" Name="P"/>
				</expression>
			</expression>
			<expression tag="Symbolic.Symbol" Name="P"/>
			<expression tag="List.List">
				<expression tag="Logic.True"/>
				<expression tag="Logic.False"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.Table">
			<expression tag="List.List">
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="P"/>
					<expression tag="Logic.Conjunction">
						<expression tag="Logic.False"/>
						<expression tag="Symbolic.Symbol" Name="P"/>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.True"/>
					<expression tag="Logic.False"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Logic.False"/>
					<expression tag="Logic.False"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Examples"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The following programs use logic expressions:"/>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="Internet.UniformResourceLocator" Value="/?script=examples/Truth_table" Description="Truth table"/>
				</expression>
				<expression tag="Internet.UniformResourceLocator" Value="/?script=examples/Finite-valued_logic" Description="Finite-valued logic"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Rule"/>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Author: Laurence R. Ugalde"/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Created: March 10, 2021. Last modified:"/>
				<expression tag="Time.Time" Value="1626842700000"/>
			</expression>
		</expression>
	</expression>
</expression>
