<expression tag="Formulae.Script" Modules="org.formulae.typesetting,org.formulae.text.string,org.formulae.graphics.raster,org.formulae.programming.quantum,org.formulae.math.arithmetic,org.formulae.list,org.formulae.visualization,org.formulae.diagramming,org.formulae.symbolic,org.formulae.programming,org.formulae.expression,org.formulae.chart,org.formulae.logic,org.formulae.math.complex,org.formulae.time">
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Quantum computation tutorial"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Introduction"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Deterministic algorithms"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Most algorithms are"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Deterministic_algorithm" Description="deterministic."/>
				<expression tag="String.Text" Value="It means that they follow a precise and well defined set of steps. If a given input is&#13;&#10;introduced to a deterministic program multiple times, it will always perform exactly the same set of instructions, and it will always generate the same output."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Probabilistic algorithms"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="There are several kinds of non-deterministic algorithms. The flavor we are interested in is named"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Randomized_algorithm" Description="probabilistic algorithms."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Suppose we have to calculate the area of the following shape:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Graphics.RasterGraphics" Value=""/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Since it is a irregular shape, we cannot use the well known formulae for regular shares, such as circles, polygons, etc."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="One form of calculation consists in drawing a square around the shape, and select a number of randomly chosen points inside the square, such as follows:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Graphics.RasterGraphics" Value=""/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Several points lie in the blue area, while several others do not. Lets calculate the reason of the points that lie in the blue area respect of the total of point. The area of the blue shape is&#10;approximately such that reason multiplied by the area of the enclosing square."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Of course it is an approximation, but this approximation will be closer to the real area as we use more points."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="It is an example of a probabilistic algorithm. Because it uses random numbers, results can differ even if we use the same input (the same shape, the same number of points, the same&#10;enclosing square) several times."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="There are several probabilistic algorithms, the"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Monte_Carlo_method" Description="Monte Carlo method"/>
				<expression tag="String.Text" Value="is a good example."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="In the mid 1970s,"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Solovay%E2%80%93Strassen_primality_test" Description="Robert Solovay and Volker Strassen found a probabilistic algorithm"/>
				<expression tag="String.Text" Value="to test if a number&#10;is prime or composite and proved that it runs faster that any known deterministic algorithm."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Quantum mechanics"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="We do not pretend to explain all the theory about"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Quantum_mechanics" Description="quantum mechanics,"/>
				<expression tag="String.Text" Value="we only discuss the concepts that we are going to use, using&#10;(hopefully) simple examples."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="You have surely known about the"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Schr%C3%B6dinger%27s_cat" Description="Schrödinger's cat"/>
				<expression tag="String.Text" Value="paradox: There is a closed box, containing a cat and a mechanism&#10;that, after a specific period of time (let us say, an hour), with a 50% probability, will break a poison killing the cat. Quantum mechanics states that after an hour, if we do not open the&#10;box to see the result, inside the box there is a ghostly, mixed state of both alive and dead cat. The name of this phenomena is"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Quantum_superposition" Description="quantum superposition."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Once we decide to open the box and observe, the quantum superposition collapses to a state of alive cat or dead cat."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="A superposition state can be linked, for example, suppose that, before the box experiment we have opened a hole to the box, and attached to it a video camera objective to record the&#10;activity inside the box. Then we perform the experiment. after an hour, we take the cassette or memory from the video camera (without detaching it from the box, and without opening&#10;the box). According to quantum mechanics the cassette or memory does not contain an alive or dead cat recording, but a superposition of both. The superposition of the box is linked to&#10;the videotape superposition. This phenomena is called"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Quantum_entanglement" Description="quantum entanglement."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="If we perform an observation on a superposition state, it will not only collapse to a defined state, it will also collapse all their entangles states to a consistent state. In our example, if we&#10;decide to watch the cassette or memory, it will collapse and we will see recording of either alive or dead cat. if we later open the box, we will see the same result that the recording."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Quantum computing"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="In order to differentiate terms, we use the term"/>
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="classic"/>
				</expression>
				<expression tag="String.Text" Value="to refer to the traditional theories, so is common to say"/>
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="classic computer"/>
				</expression>
				<expression tag="String.Text" Value="to a traditional computer, or"/>
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="quantum algorithm"/>
				</expression>
				<expression tag="String.Text" Value="to&#10;refer to an algorithm that use quantum elements."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="In classic computers, the minimal unit of information is a"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Bit" Description="bit."/>
				<expression tag="String.Text" Value="It is able to store a value of either a 0 (zero) or a 1. For clarity, they will be represented&#10;in this document as 0 and 1 respectively."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="In quantum computers, the minimal unit of information is a"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Qubit" Description="qubit"/>
				<expression tag="String.Text" Value="(a quantum bit). It is able to store either a zero value, usually represented as"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="String.Text" Value="(it is&#10;called"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Bra%E2%80%93ket_notation" Description="bra-ket notation"/>
				<expression tag="String.Text" Value="), a 1 value, usually represented as"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="String.Text" Value=", or a superposition of both states. More specifically, a qubit&#10;has an associated probability. What is this probability referred to ? It is the probability of the qubit to collapse to 1 once it is observed (or measured). So, a qubit with a probability of&#10;0% will always collapse to 0 when observed, a qubit with a probability of 100% will always collapse to 1 when observed, a qubit with a probability of 25% will collapse to 0 at 1/4 of&#10;times and to 1 75% of times when observed."/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="List.Table">
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Classic bit"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Quantum bit (or qubit)"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Programming.Quantum.Ket">
								<expression tag="Math.Number" Value="0"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Programming.Quantum.Ket">
								<expression tag="Math.Number" Value="1"/>
							</expression>
						</expression>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Notice that the qubit"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="String.Text" Value="is not the same as the bit 0 . The qubit"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="String.Text" Value="will collapse to the bit 0 when measured, with 100% probability. The same occurs with the qubit"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="String.Text" Value="and the bit 1."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="So, when qubits collapse, they become classical bits, in the same way that once we perform an Schrödinger's cat and make an observation, it collapses to a well defined state (an alive&#10;cat, or a dead cat) and the superposition disappears forever."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="We can also create entangled qubits. Once we measure a qubit it collapse to be a classic bit, and their entangled qubits also collapse to be classical bits, in a consistent state."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Physical realization of actual bits and qubits"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Bits and qubits are abstractions, in order to perform actual classical/quantum computation, physical realization of bits/qubits need to be physically built."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Physical realization of bits are usually done with semiconductors."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Realization of qubits is not easy and it is currently in development stages, several materials are being tested. The main problems are the isolation of element in order to impede the&#10;interaction with other materials, and the effect of spontaneous collapse of superposition quantum states. At the time of writing this article, quantum computers are very expensive and&#10;they exist in very specialized laboratories."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="What can quantum computers be used for ?"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Quantum computers can perform any task that classical computers can, either deterministic or probabilistic. Further, it was proved that using a quantum computer to simulate or&#10;emulate a classic algorithm will not be faster than with a classical computer, so using a quantum computer to perform classical algorithms provides no advantage."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="However, probabilistic algorithms are the land where quantum computing can grow and flourish. After all, qubits work probabilistically, as probabilistic algorithms do."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="It does not mean that any given probabilistic algorithm must be faster in quantum form. Faster quantum algorithms are NOT a translation from a classical algorithm to he same&#10;algorithm using a quantum computer, They result in very different algorithms, quantum algorithms are created with many different tools than classical algorithms. Development of&#10;faster quantum algorithms require a lot creativity, knowledge of mathematics, computation sciences, theories of information, etc."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="At the moment of writing this document, about"/>
				<expression tag="Internet.UniformResourceLocator" Value="http://quantumalgorithmzoo.org/" Description="65 quantum algorithms"/>
				<expression tag="String.Text" Value="have only been found to be faster than their classical counterparts."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Current model of quantum computing"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="How is the task specified to be performed by an quantum oracle ?"/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="It is defined as required by the current model of quantum computation: by a"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Quantum_circuit" Description="quantum circuit."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The following is an example of a quantum circuit:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Graphics.RasterGraphics" Value=""/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="We can observe:"/>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="The circuit is like a"/>
					<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Digital_circuit" Description="digital circuit,"/>
					<expression tag="String.Text" Value="it consist of one or several wires. In quantum circuits they are not wires, they represent the&#10;timeline, from left to right of a qubit. It is also called qubit"/>
					<expression tag="Typesetting.BoldChunk">
						<expression tag="String.Text" Value="evolution."/>
					</expression>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="There are initial values of the qubits. In the figure, they are at the left."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="The circuit contains"/>
					<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Quantum_logic_gate" Description="quantum gates,"/>
					<expression tag="String.Text" Value="that alter the nature of a qubit, or they let two or more qubits to interact with each other."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="There can be"/>
					<expression tag="Typesetting.BoldChunk">
						<expression tag="String.Text" Value="measurement"/>
					</expression>
					<expression tag="String.Text" Value="operations."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="After (at the right of) a measurement operation in a given qubit there cannot be any quantum gate operating on it, because after the measurement, the qubiit will have collapsed to&#10;a bit."/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Simulation of quantum computers"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Quantum computers are expensive at the moment of writing this, so simulating them is a good option."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Simulation of a quantum computer requires much calculation. The amount of operations grows exponentially of the size of the quantum circuit (number of qubits) and the number of&#10;quantum gates on it."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="On the other hand, simulating (relatively small) quantum circuits are good for learning, teaching and experimentation."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Creation of quantum circuits and gates"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Creation of a quantum circuit"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="To create a quantum circuit, select the expression Programming.Quantum.Circuit. Because the number of qubits is required, it will be asked for."/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Programming.Quantum.Circuit" Qubits="5">
					<expression tag="Null"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The vertical rectangle is a placeholder for quantum gates. You can add more placeholders as you wish by using the INS key:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Programming.Quantum.Circuit" Qubits="5">
					<expression tag="Null"/>
					<expression tag="Null"/>
					<expression tag="Null"/>
					<expression tag="Null"/>
					<expression tag="Null"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Addition of quantum gates"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Note. This article does not provide any explanation of how quantum gates work, if you are interested please consult specialized literature."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The following quantum gates can be added to a quantum circuit:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="List.Table">
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Quantum gate"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Parameters"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Visual representation"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Quantum_logic_gate#Pauli-X_gate" Description="Pauli X (or NOT)"/>
							<expression tag="String.Text" Value="The index of qubit&#10;in the circuit"/>
							<expression tag="Programming.Quantum.Circuit" Qubits="1">
								<expression tag="Programming.Quantum.Gate.PauliX" Qubit="1"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Quantum_logic_gate#Pauli-Y_gate" Description="Pauli Y"/>
							<expression tag="String.Text" Value="The index of qubit&#10;in the circuit"/>
							<expression tag="Programming.Quantum.Circuit" Qubits="1">
								<expression tag="Programming.Quantum.Gate.PauliY" Qubit="1"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Quantum_logic_gate#Pauli-Z_(%7F'%22%60UNIQ--postMath-00000028-QINU%60%22'%7F)_gate" Description="Pauli Z"/>
							<expression tag="String.Text" Value="The index of qubit&#10;in the circuit"/>
							<expression tag="Programming.Quantum.Circuit" Qubits="1">
								<expression tag="Programming.Quantum.Gate.PauliZ" Qubit="1"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Quantum_logic_gate#Hadamard_(H)_gate" Description="Hadamard"/>
							<expression tag="String.Text" Value="The index of qubit&#10;in the circuit"/>
							<expression tag="Programming.Quantum.Circuit" Qubits="1">
								<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="1"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Quantum_logic_gate#Square_root_of_NOT_gate_(%E2%88%9ANOT)" Description="Square root of NOT"/>
							<expression tag="String.Text" Value="The index of qubit&#10;in the circuit"/>
							<expression tag="Programming.Quantum.Circuit" Qubits="1">
								<expression tag="Programming.Quantum.Gate.SquareRootNot" Qubit="1"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Quantum_logic_gate#Phase_shift_(%7F'%22%60UNIQ--postMath-00000038-QINU%60%22'%7F)_gates" Description="Phase shift"/>
							<expression tag="String.Text" Value="The index of qubit&#10;in the circuit"/>
							<expression tag="Programming.Quantum.Circuit" Qubits="1">
								<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="1" Numerator="5" Denominator="3"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="String.Text" Value="S"/>
							<expression tag="String.Text" Value="The index of qubit&#10;in the circuit"/>
							<expression tag="Programming.Quantum.Circuit" Qubits="1">
								<expression tag="Programming.Quantum.Gate.S" Qubit="1"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="String.Text" Value="T"/>
							<expression tag="String.Text" Value="The index of qubit&#10;in the circuit"/>
							<expression tag="Programming.Quantum.Circuit" Qubits="1">
								<expression tag="Programming.Quantum.Gate.T" Qubit="1"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Quantum_logic_gate#Swap_(SWAP)_gate" Description="SWAP"/>
							<expression tag="String.Text" Value="The indices of qubits in the circuit"/>
							<expression tag="Programming.Quantum.Circuit" Qubits="2">
								<expression tag="Programming.Quantum.Gate.Swap" Qubit1="1" Qubit2="2"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="String.Text" Value="Controlled"/>
							<expression tag="String.Text" Value="The indices of qubits in the circuit"/>
							<expression tag="Programming.Quantum.Circuit" Qubits="2">
								<expression tag="Programming.Quantum.Gate.Controlled" Qubit="1">
									<expression tag="Programming.Quantum.Gate.PauliY" Qubit="2"/>
								</expression>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="String.Text" Value="Measurement"/>
							<expression tag="String.Text" Value="The index of qubit&#10;in the circuit"/>
							<expression tag="Programming.Quantum.Circuit" Qubits="1">
								<expression tag="Programming.Quantum.Measurement" Qubit="1"/>
							</expression>
						</expression>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Speaking in expressions, a quantum circuit is an expression containing quantum gates as its subexpressions. For example, the following quantum circuit:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Programming.Quantum.Circuit" Qubits="3">
					<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="2"/>
					<expression tag="Programming.Quantum.Gate.PauliX" Qubit="1"/>
					<expression tag="Programming.Quantum.Gate.Swap" Qubit1="1" Qubit2="3"/>
					<expression tag="Programming.Quantum.Gate.PauliZ" Qubit="3"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="In expressions is:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Diagramming.Tree" Expanded="True">
					<expression tag="String.Text" Value="Circuit (3 qubits)"/>
					<expression tag="Diagramming.Tree" Expanded="True">
						<expression tag="String.Text" Value="Hadamard (at qubit 2)"/>
					</expression>
					<expression tag="Diagramming.Tree" Expanded="True">
						<expression tag="String.Text" Value="Pauli X (at quibit 1)"/>
					</expression>
					<expression tag="Diagramming.Tree" Expanded="True">
						<expression tag="String.Text" Value="SWAP (qubits 1 and 3)"/>
					</expression>
					<expression tag="Diagramming.Tree" Expanded="True">
						<expression tag="String.Text" Value="Pauli Z (at qubit 3)"/>
					</expression>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Controlled gates"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="There are several other quantum gates, but they can be created under a special kind of gate, a"/>
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="controlled quantum gate."/>
				</expression>
				<expression tag="String.Text" Value="A controlled gate is when a quantum gate (such like the ones&#10;we have discussed right now) called the"/>
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="controlled gate"/>
				</expression>
				<expression tag="String.Text" Value="works depending on the state of a specific qubit, called the"/>
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="controlling gate."/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="As expressions, a a quantum controlling gate is an expression that contains one subexpression: the controlled gate."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Because a controlling gate can contain any kind of gate (excluding a measurement), it can also contain another controlling gate, so it is possible to create a gate consisting of multiple&#10;controlling gates in cascade."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="See the following examples:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="List.Table">
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Gate"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Visual representation"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Expression representation"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Controlled_NOT_gate" Description="Controlled NOT (also CNOT)"/>
							<expression tag="Programming.Quantum.Circuit" Qubits="2">
								<expression tag="Programming.Quantum.Gate.Controlled" Qubit="1">
									<expression tag="Programming.Quantum.Gate.PauliX" Qubit="2"/>
								</expression>
							</expression>
							<expression tag="Diagramming.Tree" Expanded="True">
								<expression tag="String.Text" Value="Controlled gate (at qubit 1)"/>
								<expression tag="Diagramming.Tree" Expanded="True">
									<expression tag="String.Text" Value="Pauli X (at quibit 2)"/>
								</expression>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Toffoli_gate" Description="Toffoli (also CCNOT)"/>
							<expression tag="Programming.Quantum.Circuit" Qubits="3">
								<expression tag="Programming.Quantum.Gate.Controlled" Qubit="1">
									<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
										<expression tag="Programming.Quantum.Gate.PauliX" Qubit="3"/>
									</expression>
								</expression>
							</expression>
							<expression tag="Diagramming.Tree" Expanded="True">
								<expression tag="String.Text" Value="Controlled gate (at qubit 1)"/>
								<expression tag="Diagramming.Tree" Expanded="True">
									<expression tag="String.Text" Value="Controlled gate (at qubit 2)"/>
									<expression tag="Diagramming.Tree" Expanded="True">
										<expression tag="String.Text" Value="Pauli X (at quibit 3)"/>
									</expression>
								</expression>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Fredkin_gate" Description="Fredkin (also CSWAP)"/>
							<expression tag="Programming.Quantum.Circuit" Qubits="3">
								<expression tag="Programming.Quantum.Gate.Controlled" Qubit="1">
									<expression tag="Programming.Quantum.Gate.Swap" Qubit1="2" Qubit2="3"/>
								</expression>
							</expression>
							<expression tag="Diagramming.Tree" Expanded="True">
								<expression tag="String.Text" Value="Controlled gate (at qubit 1)"/>
								<expression tag="Diagramming.Tree" Expanded="True">
									<expression tag="String.Text" Value="SWAP (qubits 2 and 3)"/>
								</expression>
							</expression>
						</expression>
					</expression>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Execution of a quantum circuit"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="To invoke the quantum oracle, we use the Quantum.Programming.ExecuteCircuit expression. It has the following characteristics:"/>
			</expression>
			<expression tag="Typesetting.BulletedList">
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="It takes as parameters, the quantum circuit and an array of the input qubits."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="If the circuit has any qubit wire containing no measurement operator, it is considered as it had an implicit one at the end (right). It means that every qubit will be eventually&#10;(explicitely or implicitely) measured."/>
				</expression>
				<expression tag="Typesetting.Paragraph">
					<expression tag="String.Text" Value="It returns an array of bits (no qubits, because of the last point, all the qubits will be measured)."/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The simplest quantum circuit is a 1-qubit circuit with no gates. Let us use as input the qubit"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="String.Text" Value=":"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Programming.Quantum.ExecuteCircuit">
			<expression tag="Programming.Quantum.Ket">
				<expression tag="Math.Number" Value="0"/>
			</expression>
			<expression tag="Programming.Quantum.Circuit" Qubits="1"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.List">
			<expression tag="Math.Number" Value="0"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Remember that if a qubit wire does not contain a measurement operator, it contains an implicit one at the end, so, from the point of view of the ExecuteCircuit expression, the circuit is&#10;equivalent to:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Programming.Quantum.Circuit" Qubits="1">
					<expression tag="Programming.Quantum.Measurement" Qubit="1"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="So the qubit is immediately measured. Because any qubit, when measured will collapse to 0 or 1 , and this qubit has an associated probability to collapse to 1 of 0%, it will necessarily&#10;collapse to the 0 , which is the result retrieved."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="It is common to invoke the quantum oracle many times."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Let us create a function that takes a circuit, the input qubits, and a number of calls. It will return a chart of the results:"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="2">
		<expression tag="Symbolic.Assignment">
			<expression tag="Symbolic.Function">
				<expression tag="Symbolic.Symbol" Name="Stats"/>
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="input"/>
					<expression tag="Symbolic.Symbol" Name="circuit"/>
					<expression tag="Symbolic.Symbol" Name="n"/>
				</expression>
			</expression>
			<expression tag="Programming.Block" Description="Description" Expanded="True">
				<expression tag="Symbolic.Local">
					<expression tag="Symbolic.Assignment">
						<expression tag="Symbolic.Symbol" Name="list"/>
						<expression tag="List.List"/>
					</expression>
				</expression>
				<expression tag="Programming.ForTimes">
					<expression tag="Expression.Append">
						<expression tag="Symbolic.Symbol" Name="list"/>
						<expression tag="String.ToString">
							<expression tag="List.CreateList">
								<expression tag="String.ToString">
									<expression tag="Symbolic.Symbol" Name="x"/>
								</expression>
								<expression tag="Symbolic.Symbol" Name="x"/>
								<expression tag="Programming.Quantum.ExecuteCircuit">
									<expression tag="Symbolic.Symbol" Name="input"/>
									<expression tag="Symbolic.Symbol" Name="circuit"/>
								</expression>
							</expression>
						</expression>
					</expression>
					<expression tag="Symbolic.Symbol" Name="n"/>
				</expression>
				<expression tag="Chart.Pie">
					<expression tag="Expression.Group">
						<expression tag="Symbolic.Symbol" Name="list"/>
					</expression>
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="String.String" Value="Size"/>
							<expression tag="List.List">
								<expression tag="Math.Number" Value="300"/>
								<expression tag="Math.Number" Value="200"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="String.String" Value="3D"/>
							<expression tag="Logic.True"/>
						</expression>
					</expression>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Paragraph">
			<expression tag="String.Text" Value="Let us use our function with the previous example, using 100 calls:"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Symbolic.Function">
			<expression tag="Symbolic.Symbol" Name="Stats"/>
			<expression tag="List.List">
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="Programming.Quantum.Circuit" Qubits="1"/>
				<expression tag="Math.Number" Value="100"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="Graphics.RasterGraphics" Value=""/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Even if we call the quantum oracle many times, we always get the bit 0 , because all the times we have a qubit with 0% of probability to collapse to the bit 1 ."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Now, we can use more complex circuits. Let us start making a simple change, We can introduce a NOT gate. This gate will change the probability of the input qubit from 0% to 100%&#10;(to collapse to the bit 1 ). The result, of course, will be always the bit 1 ."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Symbolic.Function">
			<expression tag="Symbolic.Symbol" Name="Stats"/>
			<expression tag="List.List">
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="Programming.Quantum.Circuit" Qubits="1">
					<expression tag="Programming.Quantum.Gate.PauliX" Qubit="1"/>
				</expression>
				<expression tag="Math.Number" Value="100"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="Graphics.RasterGraphics" Value="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"/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Creating a superposition"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The Hadamard quantum gate is the most used gate to create a superposition. It will change the probability of 0% of a qubit"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="String.Text" Value="or the probability of 100% from a qubit"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="String.Text" Value="to"/>
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="50%."/>
				</expression>
				<expression tag="String.Text" Value="This is now a qubit with a superposition between the states"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="String.Text" Value="and"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="String.Text" Value=".This means that if we had several qubits in such that state, and they all were measured,"/>
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="approximately"/>
				</expression>
				<expression tag="String.Text" Value="the half of them would collapse to the bit 0 , and the other half would collapse to the bit 1 :"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Symbolic.Function">
			<expression tag="Symbolic.Symbol" Name="Stats"/>
			<expression tag="List.List">
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="Programming.Quantum.Circuit" Qubits="1">
					<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="1"/>
				</expression>
				<expression tag="Math.Number" Value="100"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="Graphics.RasterGraphics" Value=""/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="This is an example. If the exercise would be run again we may get 50-50, of 51-49, because it is now a probabilistic program."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Creating independent qubits in superposition"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Let us examine the following excercise, which uses a two-qubit circuit:"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Symbolic.Function">
			<expression tag="Symbolic.Symbol" Name="Stats"/>
			<expression tag="List.List">
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="Programming.Quantum.Circuit" Qubits="2">
					<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="1"/>
				</expression>
				<expression tag="Math.Number" Value="100"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="Graphics.RasterGraphics" Value=""/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The first bit will be 0 or 1 , with 50% probability each, and the second bit will always be 0 . So, the two possible result are 00 and 10 , with equal probability each."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="In the following example, the two qubits are in superposition state, but they are independent of each other, so the four possible results are 00 , 01 , 10 and 11 with equal (25%)&#10;probability each."/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Symbolic.Function">
			<expression tag="Symbolic.Symbol" Name="Stats"/>
			<expression tag="List.List">
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="Programming.Quantum.Circuit" Qubits="2">
					<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="1"/>
					<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="2"/>
				</expression>
				<expression tag="Math.Number" Value="100"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="Graphics.RasterGraphics" Value=""/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Creating entangled qubits"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The minimal circuit to produce an entanglement of qubits is the following:"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Symbolic.Function">
			<expression tag="Symbolic.Symbol" Name="Stats"/>
			<expression tag="List.List">
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="Programming.Quantum.Circuit" Qubits="2">
					<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="1"/>
					<expression tag="Programming.Quantum.Gate.Controlled" Qubit="1">
						<expression tag="Programming.Quantum.Gate.PauliX" Qubit="2"/>
					</expression>
				</expression>
				<expression tag="Math.Number" Value="100"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="Graphics.RasterGraphics" Value=""/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The CNOT"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Controlled_NOT_gate" Description="(controlled not)"/>
				<expression tag="String.Text" Value="gate is a conditional not gate, it makes the following: If the controlling qubit (in this case, the first&#10;one) is"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="String.Text" Value=", then it flips (NOT) the content of the controlled (or target) qubit (in this case, the second one), elsewere it does nothing."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="But wait, how the controlled-not gate could know if the first qubit is |1 if it is in a superposition state between"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="String.Text" Value="and"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="String.Text" Value="? It does not, the second qubit is left also in a&#10;superposition state. Do you remember the Schrödinger's cat paradox at the start of this document ? To make an analogy, the first qubis is the box, and the second qubit is the video&#10;camera recorder."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The two qubits are in a superposition state but their states are correlated (entangled). After a measurement of the first qubit, if it were the bit 0 , the second qubit would remain&#10;unchanged ("/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="String.Text" Value="). If the first qubit were measured as the bit 1 , the controlled gate would flip the content of the second qubit from"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="String.Text" Value="to"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="String.Text" Value=". In both cases we can only get two and&#10;only two results 00 and 11 with 50% probability each, as you saw in the previous figure."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The same result must be obtained if we measured the second qubit first. after such that measurement, any measurement of the first qubit will always report the same value from the&#10;second one."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Notice that entanglement does not mean that entangled qubits will always collapse the the same value after any measure (it is for the previous example). It means that the results will&#10;always be consistent. For example, see the following figure. It is the same as the previous one, except that the second qubit is initialized as"/>
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="String.Text" Value=". Now, the two qubits will always have&#10;the opposite value after any measurement:"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Symbolic.Function">
			<expression tag="Symbolic.Symbol" Name="Stats"/>
			<expression tag="List.List">
				<expression tag="Programming.Quantum.Ket">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="Programming.Quantum.Circuit" Qubits="2">
					<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="1"/>
					<expression tag="Programming.Quantum.Gate.Controlled" Qubit="1">
						<expression tag="Programming.Quantum.Gate.PauliX" Qubit="2"/>
					</expression>
				</expression>
				<expression tag="Math.Number" Value="100"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="Graphics.RasterGraphics" Value=""/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Examples of quantum programs"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="In this section, several (very simple) programs will be written as quantum programs."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Two simple and very known problems of classical computation will be solved in quantum form."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="As shown before, the using of quantum computing for solving classical (deterministic) problems offers no advantage. However, we are doing this for educational purposes. after all, we&#10;are using a simulated quantum oracle, not a real one, so we are not wasting expensive resources."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Introduction"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="In electronics and (classical) digital circuits theories, is a very common exercise to design"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Adder_(electronics)" Description="adders."/>
				<expression tag="String.Text" Value="An adder is a digital circuit used&#10;to sum bits. An adder of two bits are named a"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Adder_(electronics)#Full_adder" Description="half adder."/>
				<expression tag="String.Text" Value="An adder for three bits is called a"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Adder_(electronics)#Full_adder" Description="full adder."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="A half adder"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Classically, a half adder is created with the following digital circuit:"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Centering">
			<expression tag="Graphics.RasterGraphics" Value="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"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="This circuit has the following tables of inputs and outputs:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="List.Table">
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="A"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="B"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Carry"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Sum"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="There are several quantum circuits able to create a half adder. Maybe the simplest one is:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Graphics.RasterGraphics" Value=""/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Input bits are A and B, giving the sum S with carry out C."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The following is the program for the half adder:"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="2">
		<expression tag="Symbolic.Assignment">
			<expression tag="Symbolic.Function">
				<expression tag="Symbolic.Symbol" Name="Half Adder"/>
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="a"/>
					<expression tag="Symbolic.Symbol" Name="b"/>
				</expression>
			</expression>
			<expression tag="Programming.Block" Description="Description" Expanded="True">
				<expression tag="Symbolic.Local">
					<expression tag="Symbolic.Assignment">
						<expression tag="Symbolic.Symbol" Name="bits"/>
						<expression tag="Programming.Quantum.ExecuteCircuit">
							<expression tag="Programming.Quantum.Ket">
								<expression tag="Symbolic.Symbol" Name="a"/>
								<expression tag="Symbolic.Symbol" Name="b"/>
								<expression tag="Math.Number" Value="0"/>
							</expression>
							<expression tag="Programming.Quantum.Circuit" Qubits="3">
								<expression tag="Programming.Quantum.Gate.Controlled" Qubit="1">
									<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
										<expression tag="Programming.Quantum.Gate.PauliX" Qubit="3"/>
									</expression>
								</expression>
								<expression tag="Programming.Quantum.Gate.Controlled" Qubit="1">
									<expression tag="Programming.Quantum.Gate.PauliX" Qubit="2"/>
								</expression>
							</expression>
						</expression>
					</expression>
				</expression>
				<expression tag="Math.Arithmetic.Addition">
					<expression tag="Math.Arithmetic.Multiplication">
						<expression tag="Math.Number" Value="2"/>
						<expression tag="Expression.Child">
							<expression tag="Symbolic.Symbol" Name="bits"/>
							<expression tag="Math.Number" Value="3"/>
						</expression>
					</expression>
					<expression tag="Expression.Child">
						<expression tag="Symbolic.Symbol" Name="bits"/>
						<expression tag="Math.Number" Value="2"/>
					</expression>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Paragraph">
			<expression tag="String.Text" Value="To test the program, we calculate all the possible combinations of two input bits. Notice that the result is in decimal."/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="List.CreateTable">
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="a"/>
				<expression tag="Symbolic.Symbol" Name="b"/>
				<expression tag="Symbolic.Function">
					<expression tag="Symbolic.Symbol" Name="Half Adder"/>
					<expression tag="List.List">
						<expression tag="Symbolic.Symbol" Name="a"/>
						<expression tag="Symbolic.Symbol" Name="b"/>
					</expression>
				</expression>
			</expression>
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="a"/>
				<expression tag="Symbolic.Symbol" Name="b"/>
			</expression>
			<expression tag="List.CartesianExponentiation">
				<expression tag="List.List">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="Math.Number" Value="2"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.Table">
			<expression tag="List.List">
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="a"/>
					<expression tag="Symbolic.Symbol" Name="b"/>
					<expression tag="Symbolic.Function">
						<expression tag="Symbolic.Symbol" Name="Half Adder"/>
						<expression tag="List.List">
							<expression tag="Symbolic.Symbol" Name="a"/>
							<expression tag="Symbolic.Symbol" Name="b"/>
						</expression>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="2"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="A full adder"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Classically, a full adder is created with the following digital circuit:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Graphics.RasterGraphics" Value=""/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="This circuit has the following tables of inputs and outputs:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="List.Table">
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="A"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="B"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="C"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Carry"/>
							</expression>
							<expression tag="Visualization.Bold" Value="True" Set="True">
								<expression tag="String.Text" Value="Sum"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="1"/>
						</expression>
					</expression>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="There are several quantum circuits able to create a full adder. Maybe the simplest one is:"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Graphics.RasterGraphics" Value="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"/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The following is the program for the full adder:"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="2">
		<expression tag="Symbolic.Assignment">
			<expression tag="Symbolic.Function">
				<expression tag="Symbolic.Symbol" Name="Full adder"/>
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="a"/>
					<expression tag="Symbolic.Symbol" Name="b"/>
					<expression tag="Symbolic.Symbol" Name="c"/>
				</expression>
			</expression>
			<expression tag="Programming.Block" Description="Description" Expanded="True">
				<expression tag="Symbolic.Local">
					<expression tag="Symbolic.Assignment">
						<expression tag="Symbolic.Symbol" Name="bits"/>
						<expression tag="Programming.Quantum.ExecuteCircuit">
							<expression tag="Programming.Quantum.Ket">
								<expression tag="Symbolic.Symbol" Name="a"/>
								<expression tag="Symbolic.Symbol" Name="b"/>
								<expression tag="Symbolic.Symbol" Name="c"/>
								<expression tag="Math.Number" Value="0"/>
							</expression>
							<expression tag="Programming.Quantum.Circuit" Qubits="4">
								<expression tag="Programming.Quantum.Gate.Controlled" Qubit="1">
									<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
										<expression tag="Programming.Quantum.Gate.PauliX" Qubit="4"/>
									</expression>
								</expression>
								<expression tag="Programming.Quantum.Gate.Controlled" Qubit="1">
									<expression tag="Programming.Quantum.Gate.PauliX" Qubit="2"/>
								</expression>
								<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
									<expression tag="Programming.Quantum.Gate.Controlled" Qubit="3">
										<expression tag="Programming.Quantum.Gate.PauliX" Qubit="4"/>
									</expression>
								</expression>
								<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
									<expression tag="Programming.Quantum.Gate.PauliX" Qubit="3"/>
								</expression>
								<expression tag="Programming.Quantum.Gate.Controlled" Qubit="1">
									<expression tag="Programming.Quantum.Gate.PauliX" Qubit="2"/>
								</expression>
							</expression>
						</expression>
					</expression>
				</expression>
				<expression tag="Math.Arithmetic.Addition">
					<expression tag="Math.Arithmetic.Multiplication">
						<expression tag="Math.Number" Value="2"/>
						<expression tag="Expression.Child">
							<expression tag="Symbolic.Symbol" Name="bits"/>
							<expression tag="Math.Number" Value="4"/>
						</expression>
					</expression>
					<expression tag="Expression.Child">
						<expression tag="Symbolic.Symbol" Name="bits"/>
						<expression tag="Math.Number" Value="3"/>
					</expression>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Paragraph">
			<expression tag="String.Text" Value="To test the program, we calculate all the possible combinations of three input bits. Notice that the result is in decimal."/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="List.CreateTable">
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="a"/>
				<expression tag="Symbolic.Symbol" Name="b"/>
				<expression tag="Symbolic.Symbol" Name="c"/>
				<expression tag="Symbolic.Function">
					<expression tag="Symbolic.Symbol" Name="Full adder"/>
					<expression tag="List.List">
						<expression tag="Symbolic.Symbol" Name="a"/>
						<expression tag="Symbolic.Symbol" Name="b"/>
						<expression tag="Symbolic.Symbol" Name="c"/>
					</expression>
				</expression>
			</expression>
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="a"/>
				<expression tag="Symbolic.Symbol" Name="b"/>
				<expression tag="Symbolic.Symbol" Name="c"/>
			</expression>
			<expression tag="List.CartesianExponentiation">
				<expression tag="List.List">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="Math.Number" Value="3"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.Table">
			<expression tag="List.List">
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="a"/>
					<expression tag="Symbolic.Symbol" Name="b"/>
					<expression tag="Symbolic.Symbol" Name="c"/>
					<expression tag="Symbolic.Function">
						<expression tag="Symbolic.Symbol" Name="Full adder"/>
						<expression tag="List.List">
							<expression tag="Symbolic.Symbol" Name="a"/>
							<expression tag="Symbolic.Symbol" Name="b"/>
							<expression tag="Symbolic.Symbol" Name="c"/>
						</expression>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="2"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="2"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="2"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="3"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Programmatic creation of quantum circuits and gates"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Up now, we have created quantum circuits and gates manually. However, it is possible to create them by programming. see the following example:"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Programming.Block" Description="Description" Expanded="True">
			<expression tag="Symbolic.Local">
				<expression tag="Symbolic.Assignment">
					<expression tag="Symbolic.Symbol" Name="c"/>
					<expression tag="Programming.Quantum.CreateCircuit">
						<expression tag="Math.Number" Value="5"/>
					</expression>
				</expression>
			</expression>
			<expression tag="Expression.Append">
				<expression tag="Symbolic.Symbol" Name="c"/>
				<expression tag="Programming.Quantum.CreateHadamard">
					<expression tag="Math.Number" Value="4"/>
				</expression>
			</expression>
			<expression tag="Expression.Append">
				<expression tag="Symbolic.Symbol" Name="c"/>
				<expression tag="Programming.Quantum.CreateControlled">
					<expression tag="Math.Number" Value="2"/>
					<expression tag="Programming.Quantum.CreatePauliX">
						<expression tag="Math.Number" Value="1"/>
					</expression>
				</expression>
			</expression>
			<expression tag="Expression.Append">
				<expression tag="Symbolic.Symbol" Name="c"/>
				<expression tag="Programming.Quantum.CreateSwap">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="4"/>
				</expression>
			</expression>
			<expression tag="Expression.Append">
				<expression tag="Symbolic.Symbol" Name="c"/>
				<expression tag="Programming.Quantum.CreateControlled">
					<expression tag="Math.Number" Value="2"/>
					<expression tag="Programming.Quantum.CreateControlled">
						<expression tag="Math.Number" Value="4"/>
						<expression tag="Programming.Quantum.CreatePauliX">
							<expression tag="Math.Number" Value="5"/>
						</expression>
					</expression>
				</expression>
			</expression>
			<expression tag="Symbolic.Symbol" Name="c"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="Programming.Quantum.Circuit" Qubits="5">
			<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="4"/>
			<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
				<expression tag="Programming.Quantum.Gate.PauliX" Qubit="1"/>
			</expression>
			<expression tag="Programming.Quantum.Gate.Swap" Qubit1="1" Qubit2="4"/>
			<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
				<expression tag="Programming.Quantum.Gate.Controlled" Qubit="4">
					<expression tag="Programming.Quantum.Gate.PauliX" Qubit="5"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Integer_factorization" Description="Shor's algorithm"/>
				<expression tag="String.Text" Value="is a very well known probabilistic quantum algorithm, for"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Integer_factorization" Description="integer factorization."/>
				<expression tag="String.Text" Value="This algorithm requires to apply the called"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Quantum_Fourier_transform" Description="quantum Fourier transform"/>
				<expression tag="String.Text" Value="to the input. The interesting part is that this transform is a quantum circuit which depends of the input. It means that for every input has its own quantum circuit!"/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The following program generates the quantum circuit for the discrete Fourier transform, which depends of the input n:"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="2">
		<expression tag="Symbolic.Assignment">
			<expression tag="Symbolic.Function">
				<expression tag="Symbolic.Symbol" Name="Discrete Fourier transform"/>
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="n"/>
				</expression>
			</expression>
			<expression tag="Programming.Block" Description="Description" Expanded="True">
				<expression tag="Symbolic.Local">
					<expression tag="Symbolic.Assignment">
						<expression tag="Symbolic.Symbol" Name="circuit"/>
						<expression tag="Programming.Quantum.CreateCircuit">
							<expression tag="Symbolic.Symbol" Name="n"/>
						</expression>
					</expression>
				</expression>
				<expression tag="Programming.ForFromTo">
					<expression tag="Programming.Block" Description="Description" Expanded="True">
						<expression tag="Programming.ForFromTo">
							<expression tag="Expression.Append">
								<expression tag="Symbolic.Symbol" Name="circuit"/>
								<expression tag="Programming.Quantum.CreateControlled">
									<expression tag="Math.Arithmetic.Addition">
										<expression tag="Symbolic.Symbol" Name="n"/>
										<expression tag="Math.Arithmetic.Negative">
											<expression tag="Symbolic.Symbol" Name="j"/>
										</expression>
										<expression tag="Math.Number" Value="1"/>
									</expression>
									<expression tag="Programming.Quantum.CreatePhaseShift">
										<expression tag="Math.Arithmetic.Addition">
											<expression tag="Symbolic.Symbol" Name="n"/>
											<expression tag="Math.Arithmetic.Negative">
												<expression tag="Symbolic.Symbol" Name="i"/>
											</expression>
											<expression tag="Math.Number" Value="1"/>
										</expression>
										<expression tag="Math.Number" Value="1"/>
										<expression tag="Math.Arithmetic.Exponentiation">
											<expression tag="Math.Number" Value="2"/>
											<expression tag="Math.Arithmetic.Addition">
												<expression tag="Symbolic.Symbol" Name="i"/>
												<expression tag="Math.Arithmetic.Negative">
													<expression tag="Symbolic.Symbol" Name="j"/>
												</expression>
											</expression>
										</expression>
									</expression>
								</expression>
							</expression>
							<expression tag="Symbolic.Symbol" Name="j"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Symbolic.Symbol" Name="i"/>
								<expression tag="Math.Arithmetic.Negative">
									<expression tag="Math.Number" Value="1"/>
								</expression>
							</expression>
						</expression>
						<expression tag="Expression.Append">
							<expression tag="Symbolic.Symbol" Name="circuit"/>
							<expression tag="Programming.Quantum.CreateHadamard">
								<expression tag="Math.Arithmetic.Addition">
									<expression tag="Symbolic.Symbol" Name="n"/>
									<expression tag="Math.Arithmetic.Negative">
										<expression tag="Symbolic.Symbol" Name="i"/>
									</expression>
									<expression tag="Math.Number" Value="1"/>
								</expression>
							</expression>
						</expression>
					</expression>
					<expression tag="Symbolic.Symbol" Name="i"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Symbolic.Symbol" Name="n"/>
				</expression>
				<expression tag="Programming.ForFromTo">
					<expression tag="Expression.Append">
						<expression tag="Symbolic.Symbol" Name="circuit"/>
						<expression tag="Programming.Quantum.CreateSwap">
							<expression tag="Symbolic.Symbol" Name="i"/>
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Symbolic.Symbol" Name="n"/>
								<expression tag="Math.Arithmetic.Negative">
									<expression tag="Symbolic.Symbol" Name="i"/>
								</expression>
								<expression tag="Math.Number" Value="1"/>
							</expression>
						</expression>
					</expression>
					<expression tag="Symbolic.Symbol" Name="i"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Arithmetic.Div">
						<expression tag="Symbolic.Symbol" Name="n"/>
						<expression tag="Math.Number" Value="2"/>
					</expression>
				</expression>
				<expression tag="Symbolic.Symbol" Name="circuit"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Paragraph">
			<expression tag="String.Text" Value="The following are some result, for n 1..5: (Note. Several authors define the circuit slightly different)."/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="List.CreateTable">
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="n"/>
				<expression tag="Symbolic.Function">
					<expression tag="Symbolic.Symbol" Name="Discrete Fourier transform"/>
					<expression tag="List.List">
						<expression tag="Symbolic.Symbol" Name="n"/>
					</expression>
				</expression>
			</expression>
			<expression tag="Symbolic.Symbol" Name="n"/>
			<expression tag="Math.Number" Value="1"/>
			<expression tag="Math.Number" Value="5"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.Table">
			<expression tag="List.List">
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="n"/>
					<expression tag="Symbolic.Function">
						<expression tag="Symbolic.Symbol" Name="Discrete Fourier transform"/>
						<expression tag="List.List">
							<expression tag="Symbolic.Symbol" Name="n"/>
						</expression>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Programming.Quantum.Circuit" Qubits="1">
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="1"/>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="2"/>
					<expression tag="Programming.Quantum.Circuit" Qubits="2">
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="2"/>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="1" Numerator="1" Denominator="2"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="1"/>
						<expression tag="Programming.Quantum.Gate.Swap" Qubit1="1" Qubit2="2"/>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="3"/>
					<expression tag="Programming.Quantum.Circuit" Qubits="3">
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="3"/>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="3">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="2" Numerator="1" Denominator="2"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="2"/>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="3">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="1" Numerator="1" Denominator="4"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="1" Numerator="1" Denominator="2"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="1"/>
						<expression tag="Programming.Quantum.Gate.Swap" Qubit1="1" Qubit2="3"/>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="4"/>
					<expression tag="Programming.Quantum.Circuit" Qubits="4">
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="4"/>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="4">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="3" Numerator="1" Denominator="2"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="3"/>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="4">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="2" Numerator="1" Denominator="4"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="3">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="2" Numerator="1" Denominator="2"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="2"/>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="4">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="1" Numerator="1" Denominator="8"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="3">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="1" Numerator="1" Denominator="4"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="1" Numerator="1" Denominator="2"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="1"/>
						<expression tag="Programming.Quantum.Gate.Swap" Qubit1="1" Qubit2="4"/>
						<expression tag="Programming.Quantum.Gate.Swap" Qubit1="2" Qubit2="3"/>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="5"/>
					<expression tag="Programming.Quantum.Circuit" Qubits="5">
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="5"/>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="5">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="4" Numerator="1" Denominator="2"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="4"/>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="5">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="3" Numerator="1" Denominator="4"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="4">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="3" Numerator="1" Denominator="2"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="3"/>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="5">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="2" Numerator="1" Denominator="8"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="4">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="2" Numerator="1" Denominator="4"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="3">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="2" Numerator="1" Denominator="2"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="2"/>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="5">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="1" Numerator="1" Denominator="16"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="4">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="1" Numerator="1" Denominator="8"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="3">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="1" Numerator="1" Denominator="4"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
							<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="1" Numerator="1" Denominator="2"/>
						</expression>
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="1"/>
						<expression tag="Programming.Quantum.Gate.Swap" Qubit1="1" Qubit2="5"/>
						<expression tag="Programming.Quantum.Gate.Swap" Qubit1="2" Qubit2="4"/>
					</expression>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="Typesetting.BoldChunk">
					<expression tag="String.Text" Value="Inspecting the mathematics behind quantum computing"/>
				</expression>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="There are mathematical concepts that govern the evolution of qubits through a quantum circuit. In this part we do not pretend to explain it to detail."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The evolution of the qubits on a single gate are defined as a"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Complex_number" Description="unitary matrix"/>
				<expression tag="String.Text" Value="of"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Complex_number" Description="complex numbers,"/>
				<expression tag="String.Text" Value="which can in turn be defined as operations (usually"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Tensor_product" Description="tensor products"/>
				<expression tag="String.Text" Value=")."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The complete circuit can be represented as a the"/>
				<expression tag="Internet.UniformResourceLocator" Value="https://en.wikipedia.org/wiki/Matrix_multiplication" Description="multiplication"/>
				<expression tag="String.Text" Value="of such these matrices."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="A quantum circuit with n qubits and m quantum gates, are defined as a"/>
				<expression tag="List.CartesianProduct">
					<expression tag="Math.Arithmetic.Exponentiation">
						<expression tag="Math.Number" Value="2"/>
						<expression tag="String.Text" Value="n"/>
					</expression>
					<expression tag="Math.Arithmetic.Exponentiation">
						<expression tag="Math.Number" Value="2"/>
						<expression tag="String.Text" Value="n"/>
					</expression>
				</expression>
				<expression tag="String.Text" Value="matrix of complex numbers, which is also (at least) a multiplication of m"/>
				<expression tag="List.CartesianProduct">
					<expression tag="Math.Arithmetic.Exponentiation">
						<expression tag="Math.Number" Value="2"/>
						<expression tag="String.Text" Value="n"/>
					</expression>
					<expression tag="Math.Arithmetic.Exponentiation">
						<expression tag="Math.Number" Value="2"/>
						<expression tag="String.Text" Value="n"/>
					</expression>
				</expression>
				<expression tag="String.Text" Value="matrices."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="As you can see, the matrices grow exponentially to the number of qubits. This growing makes the simulation of quantum circuit possible for relatively few qubits only."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="For an example, consider the following 3-qubit circuit, with associated matrices of size"/>
				<expression tag="List.CartesianProduct">
					<expression tag="Math.Arithmetic.Exponentiation">
						<expression tag="Math.Number" Value="2"/>
						<expression tag="Math.Number" Value="3"/>
					</expression>
					<expression tag="Math.Arithmetic.Exponentiation">
						<expression tag="Math.Number" Value="2"/>
						<expression tag="Math.Number" Value="3"/>
					</expression>
				</expression>
				<expression tag="String.Text" Value="="/>
				<expression tag="List.CartesianProduct">
					<expression tag="Math.Number" Value="8"/>
					<expression tag="Math.Number" Value="8"/>
				</expression>
				<expression tag="String.Text" Value=":"/>
			</expression>
			<expression tag="Typesetting.Centering">
				<expression tag="Programming.Quantum.Circuit" Qubits="3">
					<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="2"/>
					<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
						<expression tag="Programming.Quantum.Gate.PauliX" Qubit="3"/>
					</expression>
					<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
						<expression tag="Programming.Quantum.Gate.PauliY" Qubit="1"/>
					</expression>
					<expression tag="Programming.Quantum.Gate.Swap" Qubit1="1" Qubit2="2"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Paragraph">
			<expression tag="String.Text" Value="The expression Programming.Circuit.GetCircuitMatrix retrieves the associated matrix of the circuit:"/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Programming.Quantum.GetCircuitMatrix">
			<expression tag="Programming.Quantum.Circuit" Qubits="3">
				<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="2"/>
				<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
					<expression tag="Programming.Quantum.Gate.PauliX" Qubit="3"/>
				</expression>
				<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
					<expression tag="Programming.Quantum.Gate.PauliY" Qubit="1"/>
				</expression>
				<expression tag="Programming.Quantum.Gate.Swap" Qubit1="1" Qubit2="2"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.List">
			<expression tag="List.List">
				<expression tag="Math.Arithmetic.Division">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Arithmetic.SquareRoot">
						<expression tag="Math.Number" Value="2"/>
					</expression>
				</expression>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Arithmetic.Negative">
					<expression tag="Math.Arithmetic.Multiplication">
						<expression tag="Math.Arithmetic.Division">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Arithmetic.SquareRoot">
								<expression tag="Math.Number" Value="2"/>
							</expression>
						</expression>
						<expression tag="Math.Complex.Imaginary"/>
					</expression>
				</expression>
			</expression>
			<expression tag="List.List">
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Arithmetic.Division">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Arithmetic.SquareRoot">
						<expression tag="Math.Number" Value="2"/>
					</expression>
				</expression>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Arithmetic.Negative">
					<expression tag="Math.Arithmetic.Multiplication">
						<expression tag="Math.Arithmetic.Division">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Arithmetic.SquareRoot">
								<expression tag="Math.Number" Value="2"/>
							</expression>
						</expression>
						<expression tag="Math.Complex.Imaginary"/>
					</expression>
				</expression>
				<expression tag="Math.Number" Value="0"/>
			</expression>
			<expression tag="List.List">
				<expression tag="Math.Arithmetic.Division">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Arithmetic.SquareRoot">
						<expression tag="Math.Number" Value="2"/>
					</expression>
				</expression>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Arithmetic.Multiplication">
					<expression tag="Math.Arithmetic.Division">
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Arithmetic.SquareRoot">
							<expression tag="Math.Number" Value="2"/>
						</expression>
					</expression>
					<expression tag="Math.Complex.Imaginary"/>
				</expression>
			</expression>
			<expression tag="List.List">
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Arithmetic.Division">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Arithmetic.SquareRoot">
						<expression tag="Math.Number" Value="2"/>
					</expression>
				</expression>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Arithmetic.Multiplication">
					<expression tag="Math.Arithmetic.Division">
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Arithmetic.SquareRoot">
							<expression tag="Math.Number" Value="2"/>
						</expression>
					</expression>
					<expression tag="Math.Complex.Imaginary"/>
				</expression>
				<expression tag="Math.Number" Value="0"/>
			</expression>
			<expression tag="List.List">
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Arithmetic.Division">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Arithmetic.SquareRoot">
						<expression tag="Math.Number" Value="2"/>
					</expression>
				</expression>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Arithmetic.Multiplication">
					<expression tag="Math.Arithmetic.Division">
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Arithmetic.SquareRoot">
							<expression tag="Math.Number" Value="2"/>
						</expression>
					</expression>
					<expression tag="Math.Complex.Imaginary"/>
				</expression>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
			</expression>
			<expression tag="List.List">
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Arithmetic.Division">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Arithmetic.SquareRoot">
						<expression tag="Math.Number" Value="2"/>
					</expression>
				</expression>
				<expression tag="Math.Arithmetic.Multiplication">
					<expression tag="Math.Arithmetic.Division">
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Arithmetic.SquareRoot">
							<expression tag="Math.Number" Value="2"/>
						</expression>
					</expression>
					<expression tag="Math.Complex.Imaginary"/>
				</expression>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
			</expression>
			<expression tag="List.List">
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Arithmetic.Division">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Arithmetic.SquareRoot">
						<expression tag="Math.Number" Value="2"/>
					</expression>
				</expression>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Arithmetic.Negative">
					<expression tag="Math.Arithmetic.Multiplication">
						<expression tag="Math.Arithmetic.Division">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Arithmetic.SquareRoot">
								<expression tag="Math.Number" Value="2"/>
							</expression>
						</expression>
						<expression tag="Math.Complex.Imaginary"/>
					</expression>
				</expression>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
			</expression>
			<expression tag="List.List">
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Arithmetic.Division">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Arithmetic.SquareRoot">
						<expression tag="Math.Number" Value="2"/>
					</expression>
				</expression>
				<expression tag="Math.Arithmetic.Negative">
					<expression tag="Math.Arithmetic.Multiplication">
						<expression tag="Math.Arithmetic.Division">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Arithmetic.SquareRoot">
								<expression tag="Math.Number" Value="2"/>
							</expression>
						</expression>
						<expression tag="Math.Complex.Imaginary"/>
					</expression>
				</expression>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
				<expression tag="Math.Number" Value="0"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Because Fōrmulæ is a symbolic system, it is able to provide the result symbolically. Most quantum programming languages are able to manage the calculations numerically only."/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="The expression Programming.Circuit.GetCircuitOperations retrieves the associated matrix of the circuit, as a multiplication of matrices, representing each every gate of the circuit):"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Programming.Quantum.GetCircuitOperations">
			<expression tag="Programming.Quantum.Circuit" Qubits="3">
				<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="2"/>
				<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
					<expression tag="Programming.Quantum.Gate.PauliX" Qubit="3"/>
				</expression>
				<expression tag="Programming.Quantum.Gate.Controlled" Qubit="2">
					<expression tag="Programming.Quantum.Gate.PauliY" Qubit="1"/>
				</expression>
				<expression tag="Programming.Quantum.Gate.Swap" Qubit1="1" Qubit2="2"/>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="Math.Arithmetic.Multiplication">
			<expression tag="Math.Matrix.KroneckerProduct">
				<expression tag="List.List">
					<expression tag="List.List">
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="List.List">
						<expression tag="Math.Arithmetic.Division">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Arithmetic.SquareRoot">
								<expression tag="Math.Number" Value="2"/>
							</expression>
						</expression>
						<expression tag="Math.Arithmetic.Division">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Arithmetic.SquareRoot">
								<expression tag="Math.Number" Value="2"/>
							</expression>
						</expression>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Arithmetic.Division">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Arithmetic.SquareRoot">
								<expression tag="Math.Number" Value="2"/>
							</expression>
						</expression>
						<expression tag="Math.Arithmetic.Negative">
							<expression tag="Math.Arithmetic.Division">
								<expression tag="Math.Number" Value="1"/>
								<expression tag="Math.Arithmetic.SquareRoot">
									<expression tag="Math.Number" Value="2"/>
								</expression>
							</expression>
						</expression>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="List.List">
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
					</expression>
				</expression>
			</expression>
			<expression tag="Math.Matrix.KroneckerProduct">
				<expression tag="List.List">
					<expression tag="List.List">
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="List.List">
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
				</expression>
			</expression>
			<expression tag="Math.Arithmetic.Multiplication">
				<expression tag="List.List">
					<expression tag="List.List">
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
					</expression>
				</expression>
				<expression tag="Math.Matrix.KroneckerProduct">
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Arithmetic.Negative">
								<expression tag="Math.Complex.Imaginary"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Complex.Imaginary"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
					</expression>
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
						</expression>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="List.List">
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
						<expression tag="Math.Number" Value="0"/>
					</expression>
					<expression tag="List.List">
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="0"/>
						<expression tag="Math.Number" Value="1"/>
					</expression>
				</expression>
			</expression>
			<expression tag="List.List">
				<expression tag="List.List">
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
					<expression tag="Math.Number" Value="0"/>
				</expression>
				<expression tag="List.List">
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="0"/>
					<expression tag="Math.Number" Value="1"/>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Paragraph">
			<expression tag="String.Text" Value="Both the expression Programming.Circuit.GetCircuitMatrix and Programming.Circuit.GetCircuitOperations can only accept quantum circuit containing no measurement operations."/>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="List.CreateTable">
			<expression tag="List.List">
				<expression tag="Symbolic.Symbol" Name="c"/>
				<expression tag="Programming.Quantum.GetCircuitMatrix">
					<expression tag="Symbolic.Symbol" Name="c"/>
				</expression>
			</expression>
			<expression tag="Symbolic.Symbol" Name="c"/>
			<expression tag="List.List">
				<expression tag="Programming.Quantum.Circuit" Qubits="1">
					<expression tag="Programming.Quantum.Gate.PauliX" Qubit="1"/>
				</expression>
				<expression tag="Programming.Quantum.Circuit" Qubits="1">
					<expression tag="Programming.Quantum.Gate.PauliY" Qubit="1"/>
				</expression>
				<expression tag="Programming.Quantum.Circuit" Qubits="1">
					<expression tag="Programming.Quantum.Gate.PauliZ" Qubit="1"/>
				</expression>
				<expression tag="Programming.Quantum.Circuit" Qubits="1">
					<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="1"/>
				</expression>
				<expression tag="Programming.Quantum.Circuit" Qubits="1">
					<expression tag="Programming.Quantum.Gate.SquareRootNot" Qubit="1"/>
				</expression>
				<expression tag="Programming.Quantum.Circuit" Qubits="1">
					<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="1" Numerator="1" Denominator="2"/>
				</expression>
				<expression tag="Programming.Quantum.Circuit" Qubits="2">
					<expression tag="Programming.Quantum.Gate.Swap" Qubit1="1" Qubit2="2"/>
				</expression>
				<expression tag="Programming.Quantum.Circuit" Qubits="2">
					<expression tag="Programming.Quantum.Gate.Controlled" Qubit="1">
						<expression tag="Programming.Quantum.Gate.PauliX" Qubit="2"/>
					</expression>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="1">
		<expression tag="List.Table">
			<expression tag="List.List">
				<expression tag="List.List">
					<expression tag="Symbolic.Symbol" Name="c"/>
					<expression tag="Programming.Quantum.GetCircuitMatrix">
						<expression tag="Symbolic.Symbol" Name="c"/>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Programming.Quantum.Circuit" Qubits="1">
						<expression tag="Programming.Quantum.Gate.PauliX" Qubit="1"/>
					</expression>
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Programming.Quantum.Circuit" Qubits="1">
						<expression tag="Programming.Quantum.Gate.PauliY" Qubit="1"/>
					</expression>
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Arithmetic.Negative">
								<expression tag="Math.Complex.Imaginary"/>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Complex.Imaginary"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Programming.Quantum.Circuit" Qubits="1">
						<expression tag="Programming.Quantum.Gate.PauliZ" Qubit="1"/>
					</expression>
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Arithmetic.Negative">
								<expression tag="Math.Number" Value="1"/>
							</expression>
						</expression>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Programming.Quantum.Circuit" Qubits="1">
						<expression tag="Programming.Quantum.Gate.Hadamard" Qubit="1"/>
					</expression>
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Math.Arithmetic.Division">
								<expression tag="Math.Number" Value="1"/>
								<expression tag="Math.Arithmetic.SquareRoot">
									<expression tag="Math.Number" Value="2"/>
								</expression>
							</expression>
							<expression tag="Math.Arithmetic.Division">
								<expression tag="Math.Number" Value="1"/>
								<expression tag="Math.Arithmetic.SquareRoot">
									<expression tag="Math.Number" Value="2"/>
								</expression>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Arithmetic.Division">
								<expression tag="Math.Number" Value="1"/>
								<expression tag="Math.Arithmetic.SquareRoot">
									<expression tag="Math.Number" Value="2"/>
								</expression>
							</expression>
							<expression tag="Math.Arithmetic.Negative">
								<expression tag="Math.Arithmetic.Division">
									<expression tag="Math.Number" Value="1"/>
									<expression tag="Math.Arithmetic.SquareRoot">
										<expression tag="Math.Number" Value="2"/>
									</expression>
								</expression>
							</expression>
						</expression>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Programming.Quantum.Circuit" Qubits="1">
						<expression tag="Programming.Quantum.Gate.SquareRootNot" Qubit="1"/>
					</expression>
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Math.Arithmetic.Division">
									<expression tag="Math.Number" Value="1"/>
									<expression tag="Math.Number" Value="2"/>
								</expression>
								<expression tag="Math.Arithmetic.Multiplication">
									<expression tag="Math.Arithmetic.Division">
										<expression tag="Math.Number" Value="1"/>
										<expression tag="Math.Number" Value="2"/>
									</expression>
									<expression tag="Math.Complex.Imaginary"/>
								</expression>
							</expression>
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Math.Arithmetic.Division">
									<expression tag="Math.Number" Value="1"/>
									<expression tag="Math.Number" Value="2"/>
								</expression>
								<expression tag="Math.Arithmetic.Negative">
									<expression tag="Math.Arithmetic.Multiplication">
										<expression tag="Math.Arithmetic.Division">
											<expression tag="Math.Number" Value="1"/>
											<expression tag="Math.Number" Value="2"/>
										</expression>
										<expression tag="Math.Complex.Imaginary"/>
									</expression>
								</expression>
							</expression>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Math.Arithmetic.Division">
									<expression tag="Math.Number" Value="1"/>
									<expression tag="Math.Number" Value="2"/>
								</expression>
								<expression tag="Math.Arithmetic.Negative">
									<expression tag="Math.Arithmetic.Multiplication">
										<expression tag="Math.Arithmetic.Division">
											<expression tag="Math.Number" Value="1"/>
											<expression tag="Math.Number" Value="2"/>
										</expression>
										<expression tag="Math.Complex.Imaginary"/>
									</expression>
								</expression>
							</expression>
							<expression tag="Math.Arithmetic.Addition">
								<expression tag="Math.Arithmetic.Division">
									<expression tag="Math.Number" Value="1"/>
									<expression tag="Math.Number" Value="2"/>
								</expression>
								<expression tag="Math.Arithmetic.Multiplication">
									<expression tag="Math.Arithmetic.Division">
										<expression tag="Math.Number" Value="1"/>
										<expression tag="Math.Number" Value="2"/>
									</expression>
									<expression tag="Math.Complex.Imaginary"/>
								</expression>
							</expression>
						</expression>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Programming.Quantum.Circuit" Qubits="1">
						<expression tag="Programming.Quantum.Gate.PhaseShift" Qubit="1" Numerator="1" Denominator="2"/>
					</expression>
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Arithmetic.Exponentiation">
								<expression tag="Math.Constant.Euler"/>
								<expression tag="Math.Arithmetic.Multiplication">
									<expression tag="Math.Arithmetic.Division">
										<expression tag="Math.Number" Value="1"/>
										<expression tag="Math.Number" Value="2"/>
									</expression>
									<expression tag="Math.Constant.Pi"/>
									<expression tag="Math.Complex.Imaginary"/>
								</expression>
							</expression>
						</expression>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Programming.Quantum.Circuit" Qubits="2">
						<expression tag="Programming.Quantum.Gate.Swap" Qubit1="1" Qubit2="2"/>
					</expression>
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
						</expression>
					</expression>
				</expression>
				<expression tag="List.List">
					<expression tag="Programming.Quantum.Circuit" Qubits="2">
						<expression tag="Programming.Quantum.Gate.Controlled" Qubit="1">
							<expression tag="Programming.Quantum.Gate.PauliX" Qubit="2"/>
						</expression>
					</expression>
					<expression tag="List.List">
						<expression tag="List.List">
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
						</expression>
						<expression tag="List.List">
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="0"/>
							<expression tag="Math.Number" Value="1"/>
							<expression tag="Math.Number" Value="0"/>
						</expression>
					</expression>
				</expression>
			</expression>
		</expression>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.Rule"/>
	</expression>
	<expression tag="Formulae.Script.Row" type="0">
		<expression tag="Typesetting.MultiParagraph">
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Author: Laurence R. Ugalde"/>
			</expression>
			<expression tag="Typesetting.Paragraph">
				<expression tag="String.Text" Value="Last modfied:"/>
				<expression tag="Time.Time" Value="1651991700000"/>
			</expression>
		</expression>
	</expression>
</expression>